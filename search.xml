<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 Manjaro Linux</title>
      <link href="/2019/08/14/using-manjaro/"/>
      <url>/2019/08/14/using-manjaro/</url>
      
        <content type="html"><![CDATA[<p>一直使用公司的 MacBook Pro，自己的 Ideapad 闲置着，安装一个 Linux 版本试试，就使用 Manjaro Linux 吧。</p><p>其实，Manjaro Linux 一直躺在我的 Ideapad 中，只是需要简单的配置，满足写博客的基本需求。</p><p>安装中文字体，安装中文输入法，安装一个文本编辑器，大体可以工作了。</p><a id="more"></a><h2 id="添加国内软件源"><a href="#添加国内软件源" class="headerlink" title="添加国内软件源"></a>添加国内软件源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><h2 id="安装中文字体"><a href="#安装中文字体" class="headerlink" title="安装中文字体"></a>安装中文字体</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S adobe-source-han-serif-cn-fonts wqy-zenhei</span><br></pre></td></tr></table></figure><h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx-googlepinyin</span><br><span class="line">sudo pacman -S fcitx-im</span><br><span class="line">sudo pacman -S fcitx-configtool</span><br></pre></td></tr></table></figure><p>添加 .xprofile 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=”@im=fcitx”</span><br></pre></td></tr></table></figure><p>注销登录即可。</p><h2 id="安装文本编辑器"><a href="#安装文本编辑器" class="headerlink" title="安装文本编辑器"></a>安装文本编辑器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S code</span><br></pre></td></tr></table></figure><h2 id="搭建-Hexo-环境"><a href="#搭建-Hexo-环境" class="headerlink" title="搭建 Hexo 环境"></a>搭建 Hexo 环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br><span class="line"></span><br><span class="line">nvm install stable</span><br><span class="line"></span><br><span class="line">sudo pacman -S yarn</span><br><span class="line"></span><br><span class="line">yarn global add hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># add yarn global bin to $PATH</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>习惯了 macOS 上的快捷键，可能会不太习惯，效率会有些低，但是已经很不错了。</p><p>可以安静地写文章了！</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解算法</title>
      <link href="/2019/08/12/understand-algorithm/"/>
      <url>/2019/08/12/understand-algorithm/</url>
      
        <content type="html"><![CDATA[<p>从广义上说，任何程序代码都是算法，表示一组可被人机识别的操作序列。</p><p>算法、设计模式、架构模式都可以统一视为解决特定问题的方案，我们需要用适用于各自的语言进行描述。在大多数情况下，我们可能用不到，我们需要结合具体的应用场景去分析。</p><p>同样的，算法、数据结构、设计模式、架构模式的学习，也应该采取一致的学习方式，渐进增强的方式是不错的，尤其是对进入工作中的人来说，我们可能没有时间进行系统的学习。</p><p>解决同一个问题，可能有多种算法，我们需要通过比较算法的时间复杂度和空间复杂度来选择算法。</p><p>算法是语言无关的，可以使用 伪代码 描述算法。</p><a id="more"></a><h2 id="观点"><a href="#观点" class="headerlink" title="观点"></a>观点</h2><blockquote><p>数据结构与算法都是能从常识中推到出来的。<br>数学里的一切都是可以用常识去解释的。</p></blockquote><h2 id="解题策略"><a href="#解题策略" class="headerlink" title="解题策略"></a>解题策略</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote><p>递归只是让解决方案更清晰，并没有性能上的优势。<br>如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。</p></blockquote><p>编写递归函数时，必须告诉它何时停止递归。每个递归函数都有两部分：基线条件和递归条件。</p><p>递归条件指的是函数调用自己，而基线条件则指的是函数不再调用自己，从而避免形成无限循环。</p><p>使用 尾递归！</p><h3 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h3><p>D&amp;C 算法是递归的。</p><p>使用 D&amp;C 算法解决问题的过程包括两个步骤：</p><ol><li>找出基线条件，这种条件必须尽可能简单；</li><li>不断将问题分解（或者说缩小规模），直到符合基线条件。</li></ol><p>D&amp;C 是一种解决问题的思路。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &lt; Struct.<span class="title">new</span>(:<span class="title">item</span>, :<span class="title">next</span>);</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈是一种先进后出的数据结构，可以视为功能受限的线性表，只能在尾部进行插入或删除并读取操作。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</span><br><span class="line"></span><br><span class="line">ary.pop</span><br><span class="line"></span><br><span class="line">ary.push(<span class="string">"d"</span>)</span><br></pre></td></tr></table></figure><p>压入和弹出操作：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 散列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 查找算法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">给定数组 ary = [0, 4, 7, 10, 12] , 查找 7。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>ruby</span><br><span class="line"></span><br><span class="line">ary = [<span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">ary.bsearch &#123; <span class="params">|x|</span> x == <span class="number">7</span> &#125;</span><br><span class="line"></span><br><span class="line">ary.bsearch_index &#123; <span class="params">|x|</span> x == <span class="number">7</span> &#125;</span><br><span class="line"></span><br><span class="line">ary.one? &#123; <span class="params">|x|</span> x == <span class="number">7</span> &#125;</span><br><span class="line"></span><br><span class="line">ary.none? &#123; <span class="params">|x|</span> x == <span class="number">7</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="简单查找"><a href="#简单查找" class="headerlink" title="简单查找"></a>简单查找</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(ary, key)</span></span></span><br><span class="line">  ary.each_with_index <span class="keyword">do</span> <span class="params">|item, index|</span></span><br><span class="line">    <span class="keyword">return</span> index <span class="keyword">if</span> item == key</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>二分查找是基于有序的数组实现的。算法时间复杂度为 O(log n)。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(ary, key)</span></span></span><br><span class="line">  low, high = <span class="number">0</span>, ary.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> high &gt;= low</span><br><span class="line">    mid = (low + high) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> ary[mid] &gt; key</span><br><span class="line">      high = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elsif</span> ary[mid] &lt; key</span><br><span class="line">      low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>对随机整型数组从大到小排序。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">expect = [<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">ary = [<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>].shuffle</span><br><span class="line"></span><br><span class="line">ary.sort &#123; <span class="params">|a, b|</span> b - a &#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(ary)</span></span></span><br><span class="line">  target = ary.first</span><br><span class="line">  ary.each <span class="keyword">do</span> <span class="params">|item|</span></span><br><span class="line">    target = item &gt; target ? item : target</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  target</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(ary)</span></span></span><br><span class="line">  ary.length.times <span class="keyword">do</span> <span class="params">|n|</span></span><br><span class="line">    max = max(ary)</span><br><span class="line">    ary.each <span class="keyword">do</span> <span class="params">|item|</span></span><br><span class="line">      max = item &gt; target ? item : target</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    target[n] = max</span><br><span class="line">    ary = ary - [max]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  target</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qsort</span><span class="params">(ary)</span></span></span><br><span class="line">  <span class="keyword">return</span> ary <span class="keyword">if</span> ary.length &lt;= <span class="number">1</span></span><br><span class="line">  pivot = ary.first</span><br><span class="line">  lt = ary.select &#123; <span class="params">|item|</span> item &lt; pivot &#125;</span><br><span class="line">  gt = ary.select &#123; <span class="params">|item|</span> item &gt; pivot &#125;</span><br><span class="line">  qsort(lt) + [pivot] + qsort(gt)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(ary)</span></span></span><br><span class="line">  ary.length.times <span class="keyword">do</span> <span class="params">|n|</span></span><br><span class="line">    ary.each_with_index <span class="keyword">do</span> <span class="params">|item, i|</span></span><br><span class="line">      <span class="keyword">break</span> <span class="keyword">if</span> i + <span class="number">1</span> == ary.length</span><br><span class="line">      ary[i], ary[i + <span class="number">1</span>] = ary[i + <span class="number">1</span>], ary[i] <span class="keyword">if</span> item &lt; ary[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  ary</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span><span class="params">(ary)</span></span></span><br><span class="line">  ary.length.times <span class="keyword">do</span> <span class="params">|n|</span></span><br><span class="line">    ary.each_with_index <span class="keyword">do</span> <span class="params">|item, i|</span></span><br><span class="line">      <span class="keyword">break</span> <span class="keyword">if</span> n + <span class="number">1</span> == ary.length</span><br><span class="line">      ary[i], ary[n + <span class="number">1</span>] = ary[n + <span class="number">1</span>], ary[i] <span class="keyword">if</span> item &lt; ary[n + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  ary</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h2 id="图算法"><a href="#图算法" class="headerlink" title="图算法"></a>图算法</h2><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《图解算法》</li><li>《数据结构与算法图解》</li><li><a href="https://zhuanlan.zhihu.com/p/51558622" target="_blank" rel="noopener">徐树荣的 Ruby 算法笔记</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Understand </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人技术栈</title>
      <link href="/2019/08/08/personal-tech-stack/"/>
      <url>/2019/08/08/personal-tech-stack/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我就是我，是颜色不一样的烟火。</p></blockquote><p>每个公司都有自己的技术栈，经历过一些公司，慢慢形成了自己的技术栈。</p><a id="more"></a><h2 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h2><ul><li>minikube</li></ul><h2 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h2><ul><li>MySQL</li><li>PostgreSQL</li><li>Redis</li></ul><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li>Rails</li><li>Play Framework(Scala)</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>REST</li><li>GraphQL</li><li>gRPC</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li>Vue</li><li>React</li></ul><h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h2><ul><li>Jenkins</li></ul><h2 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h2><ul><li>Github/Phabricator</li><li>DingDing/BearyChat</li><li>Jira/Teambition</li><li>Invision</li></ul>]]></content>
      
      
      <categories>
          
          <category> Person </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Resume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序运行原理剖析</title>
      <link href="/2019/08/06/program-under-a-microscope/"/>
      <url>/2019/08/06/program-under-a-microscope/</url>
      
        <content type="html"><![CDATA[<p>《程序是怎样跑起来的》摘录。</p><p>程序的运行过程是一个复杂的过程，《程序是怎样跑起来的》只呈现了一个完整的、粗糙的视图，但对消解程序运行机理的神秘感却极为有益。</p><p>《程序是怎么跑起来的》中的一些观点，也能够给人以启迪，如“程序员只需要了解寄存器即可”，计算机中的实体，都是相对透明的，可以视为不存在，直到你关注它。</p><p>抽象的力量是无穷的！</p><p>我们可以按照计算机启动的过程来构建程序运行过程中涉及的知识。</p><p>了解程序运行原理，熟悉程序运行过程中涉及的软件和硬件，有助于构建一个大的知识背景。</p><p>计算机系统是一个抽象层次体系，我们可能工作在不同的抽象层上，我们可能关注不同的系统行为，我们可以不关心，但不能不知道。</p><a id="more"></a><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>程序 = 指令 + 数据（用于运算的数值/表示内存地址的数值）</p><p><em>程序员只需要了解寄存器即可！</em> 程序是把寄存器作为对象来描述的。在程序员看来，CPU 是寄存器的集合体。</p><p>所谓的控制，就是指数据运算以外的处理（主要是数据输入输出的时机控制）</p><p>计算机电子部件 IC，IC 引脚 0V 和 5V，该特性决定了计算机的信息数据只能用二进制数来处理。</p><p>有了二进制，加上布尔逻辑，我们就可以实现基本的逻辑电路了。</p><p>集成电路(IC): CPU = 寄存器 + 控制器 + 运算器 + 时钟(时钟信号/电流信号)</p><p>从物理上（硬件）和逻辑上（软件）理解程序是怎么跑起来的！</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><ul><li>累加寄存器(1)</li><li><em>标志寄存器(1)</em></li><li><em>程序计数器(1)</em></li><li>基址寄存器(n)</li><li>变址寄存器(n)</li><li>通用寄存器(n)</li><li>指令寄存器(1)</li><li>栈寄存器(1)</li></ul><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h3 id="物理上"><a href="#物理上" class="headerlink" title="物理上"></a>物理上</h3><p>(DRAM/SRAM/ROM) -&gt; IC</p><ul><li>电源 VCC/GND</li><li>地址信号 A0~An</li><li>数据信号 D0~Dn</li><li>控制信号 RD/WR</li></ul><p>使能 RD，读取 D<br>使能 WR，写入 A</p><h3 id="逻辑上"><a href="#逻辑上" class="headerlink" title="逻辑上"></a>逻辑上</h3><p>1 字节类型的数组和内存的物理构造完全一致。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><ul><li>数据传输指令(寄存器和内存/内存和内存/寄存器和外围设备之间的数据读写操作)</li><li>运算指令(用累加寄存器执行算术运算/逻辑运算/比较运算/移位运算)</li><li>跳转指令(实现条件分支/循环/强制跳转等)</li><li>call/return 指令(函数的调用/返回调用前的地址)</li></ul><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>数据是用二进制表示的。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>队列</li><li>栈</li><li>链表</li><li>二叉树</li></ul><h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><p>利用操作系统的系统调用可以实现对硬件的控制。</p><p>操作系统借助输入输出指令控制硬件。</p><p>IN 指令通过指定端口号的端口输入数据，并将其存储在 CPU 内部的寄存器中；<br>OUT 指令将存储在 CPU 寄存器中的数据，输出到指定端口号的端口。</p><p>主机 - 连接器（IO控制器）- 外设</p><p>IO 控制器中有用于临时保存输入输出数据的内存，这个内存就是端口。</p><p>各端口之间通过端口号区分，端口号也称为 IO 地址。</p><p>中断处理：<br>实施中断请求的是连接外围设备的 IO 控制器，负责实施中断处理程序的是 CPU。</p><p>用中断来实现实时处理。</p><p>DMA vs. IRQ</p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>使用助记符，包含指令和伪指令，汇编指令与机器指令一一对应。</p><p>汇编指令 = 操作码 [+ 操作数]。</p><p>通过查看汇编语言编写的源代码，就可以了解程序的本质了。</p><p>汇编：汇编代码 - 汇编器 - &gt; 机器代码<br>反汇编（反向工程）：机器代码 - 反汇编程序  -&gt; 汇编代码</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h2 id="C-语言"><a href="#C-语言" class="headerlink" title="C 语言"></a>C 语言</h2><p>在 C 语言中，数据用变量表示，处理用函数表示，C 程序由变量和函数构成。</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>操作系统的原型是监控程序，负责程序的加载和运行。</p><p>初期的操作系统 = 监控程序 + 基本的输入输出程序</p><p>应用程序通过操作系统间接地控制硬件。</p><p>操作系统和高级编程语言都可以视为硬件的抽象。</p><p>设备驱动是操作系统的一部分，提供了同硬件进行基本的输入输出的功能。</p><p>运行环境=操作系统 + 硬件</p><p>开机 -&gt; BIOS -&gt; 引导程序 -&gt; 操作系统 -&gt;  系统软件 + 应用软件</p><h2 id="跑起来"><a href="#跑起来" class="headerlink" title="跑起来"></a>跑起来</h2><blockquote><p>CPU 的基本工作是执行存储的指令序列，即程序。程序的执行过程实际上是不断地取出指令、分析指令、执行指令的过程。</p></blockquote><p>CPU 从存放程序的主存储器里取出一条指令，译码并执行这条指令，保存执行结果，紧接着又去取指令，译码，执行指令……，如此周而复始，反复循环，使得计算机能够自动地工作。除非遇到停机指令，否则这个循环将一直进行下去。</p><p>几乎所有的冯•诺伊曼型计算机的CPU，其工作都可以分为5个阶段：</p><ul><li>取指令</li><li>指令译码</li><li>执行指令</li><li>访存取数和结果写回</li></ul><p>计算机设计的基本思想是 “程序存储控制”，即程序存储和程序控制。</p><p>当一台裸机按下电源键，咦？安装一个 GNU/Linux 操作系统，就这样跑起来了！</p><p>背后的机理有些烦复，待续……</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://software.intel.com/zh-cn/articles/book-Processor-Architecture_CPU_work_process" target="_blank" rel="noopener">CPU的工作过程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Microscope </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Program </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解分布式系统</title>
      <link href="/2019/08/04/master-distributed-system/"/>
      <url>/2019/08/04/master-distributed-system/</url>
      
        <content type="html"><![CDATA[<p>分布式的本质是——拆分与连接。</p><a id="more"></a><h2 id="中心化设计-vs-去中心化设计"><a href="#中心化设计-vs-去中心化设计" class="headerlink" title="中心化设计 vs. 去中心化设计"></a>中心化设计 vs. 去中心化设计</h2><h2 id="分布式-vs-集群"><a href="#分布式-vs-集群" class="headerlink" title="分布式 vs. 集群"></a>分布式 vs. 集群</h2><p>分布式：一个业务拆分成多个子业务，部署在不同的服务器上；<br>集群：同一个业务，部署在多个服务器上。</p><h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484941&amp;idx=1&amp;sn=e0812a9ccfde06550e24c23c4bb5ef1d&amp;source=41#wechat_redirect" target="_blank" rel="noopener">分布式系统的经典基础理论</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Master </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Architechture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精通 Socket 编程</title>
      <link href="/2019/08/02/master-socket/"/>
      <url>/2019/08/02/master-socket/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="抽象语义"><a href="#抽象语义" class="headerlink" title="抽象语义"></a>抽象语义</h2>]]></content>
      
      
      <categories>
          
          <category> Master </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgresql 实战</title>
      <link href="/2019/08/01/postgresql-in-action/"/>
      <url>/2019/08/01/postgresql-in-action/</url>
      
        <content type="html"><![CDATA[<p>如果使用 Rails 做 Web 开发的话，几乎写不了几个 SQL；即使是用 Slick/ScalikeJDBC，我们也常常使用 DSL 而非 SQL。</p><p>最近几次数据迁移，测试大佬的 SQL 编程功力让我瞠目结舌，也让我意识到自己的 SQL 编程水平很低，是时候系统地补一下 SQL 编程方面的东西。</p><p>有人将 SQL 编程分为三个阶段：</p><ol><li>第一阶段是面向过程化的SQL编程阶段<br>在这一阶段，经常会有滥用各种工具（如游标、临时表、动态SQL语句等）的情况，而程序员自己通常意识不到他们正在引起破坏。</li><li>第二阶段是面向集合的SQL编程阶段<br>从这一阶段开始，程序员开始相信那些说游标、临时表、动态SQL有害而永远不应该使用的“专家”。</li><li>第三阶段是融合的SQL编程阶段<br>在这一阶段，SQL程序员不再迷恋所谓的专家，他们可能意识到即使是游标，也并不是在所有情况下都是无用和有害的。</li></ol><p>我很认同这种观点，我也领教了面向集合的 SQL 编程的威力。</p><a id="more"></a><h2 id="SQL-必知必会"><a href="#SQL-必知必会" class="headerlink" title="SQL 必知必会"></a>SQL 必知必会</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> activities  RESTART <span class="keyword">IDENTITY</span>;</span><br></pre></td></tr></table></figure><h2 id="SQL-奇技淫巧"><a href="#SQL-奇技淫巧" class="headerlink" title="SQL 奇技淫巧"></a>SQL 奇技淫巧</h2>]]></content>
      
      
      <categories>
          
          <category> Action </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精通 Tmux</title>
      <link href="/2019/08/01/master-tmux/"/>
      <url>/2019/08/01/master-tmux/</url>
      
        <content type="html"><![CDATA[<p>为什么选择 Tmux？</p><p>在 macOS 上，iTerm2 已经够用了。如果你想进一步提高工作效率，那就使用 Tmux 吧。</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># List of plugins</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tpm'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-sensible'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-resurrect'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-continuum'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把前缀键从 C-b 更改为 C-a</span></span><br><span class="line"><span class="built_in">set</span> -g prefix C<span class="_">-a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放之前的 Ctrl-b 前缀快捷键</span></span><br><span class="line">unbind C-b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定前缀键和命令键之间的延时</span></span><br><span class="line"><span class="built_in">set</span> -sg escape-time 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保可以向其它程序发送 Ctrl-A</span></span><br><span class="line"><span class="built_in">bind</span> C<span class="_">-a</span> send-prefix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把窗口的初始索引值从 0 改为 1</span></span><br><span class="line"><span class="built_in">set</span> -g base-index 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把面板的初始索引值从 0 改为 1</span></span><br><span class="line">setw -g pane-base-index 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Prefix r 重新加载配置文件</span></span><br><span class="line"><span class="built_in">bind</span> r <span class="built_in">source</span>-file ~/.tmux.conf \; display <span class="string">"Reloaded!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割面板</span></span><br><span class="line"><span class="built_in">bind</span> | split-window -h -c <span class="string">'#&#123;pane_current_path&#125;'</span></span><br><span class="line"><span class="built_in">bind</span> - split-window -v -c <span class="string">'#&#123;pane_current_path&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在面板之间移动</span></span><br><span class="line"><span class="built_in">bind</span> h select-pane -L</span><br><span class="line"><span class="built_in">bind</span> j select-pane -D</span><br><span class="line"><span class="built_in">bind</span> k select-pane -U</span><br><span class="line"><span class="built_in">bind</span> l select-pane -R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速选择面板</span></span><br><span class="line"><span class="built_in">bind</span> -r C-h select-window -t :-</span><br><span class="line"><span class="built_in">bind</span> -r C<span class="_">-l</span> select-window -t :+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整面板大小</span></span><br><span class="line"><span class="built_in">bind</span> -r H resize-pane -L 5</span><br><span class="line"><span class="built_in">bind</span> -r J resize-pane -D 5</span><br><span class="line"><span class="built_in">bind</span> -r K resize-pane -U 5</span><br><span class="line"><span class="built_in">bind</span> -r L resize-pane -R 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标支持 - 如果你想使用的话把 off 改为 on</span></span><br><span class="line">setw -g mouse on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认的终端模式为 256 色模式</span></span><br><span class="line"><span class="built_in">set</span> -g default-terminal <span class="string">"xterm-256color"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启活动通知</span></span><br><span class="line">setw -g monitor-activity on</span><br><span class="line"><span class="built_in">set</span> -g visual-activity on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置状态栏的颜色</span></span><br><span class="line"><span class="built_in">set</span> -g status-fg white</span><br><span class="line"><span class="built_in">set</span> -g status-bg black</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗口列表的颜色</span></span><br><span class="line">setw -g window-status-fg cyan</span><br><span class="line">setw -g window-status-bg default</span><br><span class="line">setw -g window-status-attr dim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置活动窗口的颜色</span></span><br><span class="line">setw -g window-status-current-fg white</span><br><span class="line">setw -g window-status-current-bg red</span><br><span class="line">setw -g window-status-current-attr bright</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置面板和活动面板的颜色</span></span><br><span class="line"><span class="built_in">set</span> -g pane-border-fg green</span><br><span class="line"><span class="built_in">set</span> -g pane-border-bg black</span><br><span class="line"><span class="built_in">set</span> -g pane-active-border-fg white</span><br><span class="line"><span class="built_in">set</span> -g pane-active-border-bg yellow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置命令行或消息的颜色</span></span><br><span class="line"><span class="built_in">set</span> -g message-fg white</span><br><span class="line"><span class="built_in">set</span> -g message-bg black</span><br><span class="line"><span class="built_in">set</span> -g message-attr bright</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置状态栏左侧的内容和颜色</span></span><br><span class="line"><span class="built_in">set</span> -g status-left-length 40</span><br><span class="line"><span class="built_in">set</span> -g status-left <span class="string">"#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置状态栏右侧的内容和颜色</span></span><br><span class="line"><span class="comment"># 15% | 28 Nov 18:15</span></span><br><span class="line"><span class="built_in">set</span> -g status-right <span class="string">"#(~/battery Discharging) | #[fg=cyan]%d %b %R"</span></span><br><span class="line"><span class="built_in">set</span> -g status-right <span class="string">'Continuum status: #&#123;continuum_status&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每 60 秒更新一次状态栏</span></span><br><span class="line"><span class="built_in">set</span> -g status-interval 60</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗口列表居中显示</span></span><br><span class="line"><span class="built_in">set</span> -g status-justify centre</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 vi 按键</span></span><br><span class="line">setw -g mode-keys vi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在相同目录下使用 tmux-panes 脚本开启面板</span></span><br><span class="line">unbind v</span><br><span class="line">unbind n</span><br><span class="line"><span class="built_in">bind</span> v send-keys <span class="string">" ~/tmux-panes -h"</span> C-m</span><br><span class="line"><span class="built_in">bind</span> n send-keys <span class="string">" ~/tmux-panes -v"</span> C-m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时最大化面板或恢复面板大小</span></span><br><span class="line">unbind Up</span><br><span class="line"><span class="built_in">bind</span> Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp</span><br><span class="line">unbind Down</span><br><span class="line"><span class="built_in">bind</span> Down last-window \; swap-pane -s tmp.1 \; <span class="built_in">kill</span>-window -t tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把日志输出到指定文件</span></span><br><span class="line"><span class="built_in">bind</span> P pipe-pane -o <span class="string">"cat &gt;&gt;~/#W.log"</span> \; display <span class="string">"Toggled logging to ~/#W.log"</span></span><br><span class="line"></span><br><span class="line">run-shell ~/.tmux/plugins/tmux-continuum/continuum.tmux</span><br><span class="line">run -b <span class="string">'~/.tmux/plugins/tpm/tpm'</span></span><br></pre></td></tr></table></figure><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/tmux/tmux/wiki" target="_blank" rel="noopener">Tmux Wiki</a></li><li><a href="http://louiszhai.github.io/2017/09/30/tmux/" target="_blank" rel="noopener">Tmux使用手册</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Master </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解计算机网络</title>
      <link href="/2019/07/31/master-network/"/>
      <url>/2019/07/31/master-network/</url>
      
        <content type="html"><![CDATA[<p>计算机网络的本质是数据通信和资源共享。</p><a id="more"></a><p>核心思想——分组交换。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="URL-URI"><a href="#URL-URI" class="headerlink" title="URL/URI"></a>URL/URI</h3><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><h3 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h3><p>网络号和主机号</p><h3 id="套接字和端口号"><a href="#套接字和端口号" class="headerlink" title="套接字和端口号"></a>套接字和端口号</h3><h2 id="TCP-IP-协议族"><a href="#TCP-IP-协议族" class="headerlink" title="TCP/IP 协议族"></a>TCP/IP 协议族</h2><h3 id="ARP-协议"><a href="#ARP-协议" class="headerlink" title="ARP 协议"></a>ARP 协议</h3><h2 id="网络硬件"><a href="#网络硬件" class="headerlink" title="网络硬件"></a>网络硬件</h2><h3 id="DHCP-服务器"><a href="#DHCP-服务器" class="headerlink" title="DHCP 服务器"></a>DHCP 服务器</h3><p>DHCP 即动态主机配置协议，解决 IP 地址分配问题。</p><p>主机必要信息：IP地址、子网掩码、DNS服务器IP地址</p><h3 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h3><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="本地路由表"><a href="#本地路由表" class="headerlink" title="本地路由表"></a>本地路由表</h3><h2 id="网络软件"><a href="#网络软件" class="headerlink" title="网络软件"></a>网络软件</h2><blockquote><p>网络控制软件叫做协议栈。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Master </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 实战</title>
      <link href="/2019/07/30/docker-in-action/"/>
      <url>/2019/07/30/docker-in-action/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Docker 是一种构建和运行容器的流行工具。</p></blockquote><p>提到 Docker， 就会提到物理机、虚拟机、容器三者的优缺点。</p><p>和虚拟机相比，容器仅需要封装应用和应用需要的依赖文件，实现轻量的应用运行环境，拥有比虚拟机更高的硬件资源利用率。</p><p>使用 Docker 可以将应用程序打包封装到一个容器中，该容器包含了应用程序的代码、运行环境、依赖库、配置文件等必需的资源。容器之间达到进程级别的隔离，在容器中的操作，不会影响道宿主机和其他容器，不会出现应用之间相互影响的情形。</p><p>使用 Docker 可以实现开发、测试和生产环境的统一化和标准化。</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Dockerfile 构建出 Docker 镜像，通过 Docker 镜像运行 Docker 容器。</p><h3 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h3><p>镜像（Image）就是一堆只读层（read-only layer）的统一视角</p><h3 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h3><p>容器（container）的定义和镜像（image）几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。</p><p>容器 = 镜像 + 读写层</p><p>一个运行态容器（running container）被定义为一个可读写的统一文件系统加上隔离的进程空间和包含其中的进程。</p><h3 id="镜像层"><a href="#镜像层" class="headerlink" title="镜像层"></a>镜像层</h3><p>一个层并不仅仅包含文件系统的改变，它还能包含了其他重要信息。<br>元数据（metadata）就是关于这个层的额外信息，它不仅能够让Docker获取运行和构建时的信息，还包括父层的层次信息。需要注意，只读层和读写层都包含元数据。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>Dockerfile</li><li>Docker 仓库</li><li>Docker 主机</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="统一文件系统（union-file-system）"><a href="#统一文件系统（union-file-system）" class="headerlink" title="统一文件系统（union file system）"></a>统一文件系统（union file system）</h3><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>在实际开发过程中，我几乎没有用到 docker 命令，而是使用 kubectl。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line"></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">Docker Get Started</a></li><li><a href="http://merrigrove.blogspot.com/2015/10/visualizing-docker-containers-and-images.html" target="_blank" rel="noopener">Visualizing Docker Containers and Images</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 实战</title>
      <link href="/2019/07/30/kubernetes-in-action/"/>
      <url>/2019/07/30/kubernetes-in-action/</url>
      
        <content type="html"><![CDATA[<p>Kubernetes 简称 k8s，是 Google 基于 Borg 开源的容器编排调度引擎。</p><a id="more"></a><h2 id="Kubernetes-环境搭建"><a href="#Kubernetes-环境搭建" class="headerlink" title="Kubernetes 环境搭建"></a>Kubernetes 环境搭建</h2><p>在 macOS 上，搭建 Kubernetes 可以使用 kind 或 minikube。安装 Docker for Desktop 后，可以启用 kind。建议使用 minikube。</p><h3 id="安装-minikube"><a href="#安装-minikube" class="headerlink" title="安装 minikube"></a>安装 minikube</h3><p><a href="https://github.com/kubernetes/minikube" target="_blank" rel="noopener">minikube</a></p><blockquote><p>minikube implements a local Kubernetes cluster on macOS, Linux, and Windows.<br>minikube’s primary goals are to be the best tool for local Kubernetes application development and to support all Kubernetes features that fit.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew cask install minikube</span><br><span class="line"></span><br><span class="line">minikube start</span><br><span class="line"></span><br><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure><h3 id="使用-minikube"><a href="#使用-minikube" class="headerlink" title="使用 minikube"></a>使用 minikube</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">kubectl create deployment echoserver --image=k8s.gcr.io/echoserver:1.10</span><br><span class="line"></span><br><span class="line">kubectl expose deployment echoserver --<span class="built_in">type</span>=LoadBalancer --port=8080</span><br><span class="line"></span><br><span class="line">minikube service echoserver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更多命令</span></span><br><span class="line">minikube service echoserver --url</span><br><span class="line"></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">kubectl get deployments</span><br><span class="line"></span><br><span class="line">kubectl get services</span><br><span class="line"></span><br><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line">kubectl delete service echoserver</span><br><span class="line"></span><br><span class="line">kubectl delete deployment echoserver</span><br><span class="line"></span><br><span class="line">minikube stop</span><br><span class="line"></span><br><span class="line">minikube delete</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><h2 id="Kubernetes-之旅"><a href="#Kubernetes-之旅" class="headerlink" title="Kubernetes 之旅"></a>Kubernetes 之旅</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minikube service echoserver --url</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; http://192.168.99.100:32359</span></span><br></pre></td></tr></table></figure><h3 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h3><p>在浏览器中输入 URL <a href="http://192.168.99.100:32359" target="_blank" rel="noopener">http://192.168.99.100:32359</a>。</p><p>浏览器对 URL 进行解析。</p><h3 id="VirtualBox-网络连接"><a href="#VirtualBox-网络连接" class="headerlink" title="VirtualBox 网络连接"></a>VirtualBox 网络连接</h3><p>VirtualBox 有四种网络连接方式：</p><ul><li>NAT(Network Address Translation)</li><li>Bridged Adapter</li><li>Internal</li><li>Host-only Adapter</li></ul><table><thead><tr><th>Mode</th><th>VM -&gt; Host</th><th>VM &lt;- Host</th><th>VM1 <-> VM2</-></th><th>VM -&gt; Net/LAN</th><th>VM &lt;-Net/LAN</th></tr></thead><tbody><tr><td>Host-only</td><td>+</td><td>+</td><td>+</td><td>-</td><td>-</td></tr><tr><td>Internal</td><td>-</td><td>-</td><td>+</td><td>-</td><td>-</td></tr><tr><td>Bridged</td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td></tr><tr><td>NAT</td><td>+</td><td>Port forward</td><td>-</td><td>+</td><td>Port forward</td></tr><tr><td>NATservice</td><td>+</td><td>Port forward</td><td>+</td><td>+</td><td>Port forward</td></tr></tbody></table><p>minikube 使用了 NAT 和 Host-only Adapter。</p><p>minikube 虚拟机 IP 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage guestproperty get minikube <span class="string">"/VirtualBox/GuestInfo/Net/0/V4/IP"</span></span><br><span class="line"><span class="comment">#=&gt; Value: 10.0.2.15</span></span><br></pre></td></tr></table></figure><blockquote><p>In NAT mode,<br>the default network range for VM on Virtualbox is 10.0.2.0/24.<br>Host is 10.0.2.1 and the first VM should be 10.0.2.15.</p></blockquote><h3 id="登录-minikube-vm"><a href="#登录-minikube-vm" class="headerlink" title="登录 minikube-vm"></a>登录 minikube-vm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">minikube status</span><br><span class="line"><span class="comment">#=&gt; kubectl: Correctly Configured: pointing to minikube-vm at 192.168.99.100</span></span><br><span class="line"></span><br><span class="line">minikube ssh</span><br></pre></td></tr></table></figure><h3 id="与-minikube-vm-通信"><a href="#与-minikube-vm-通信" class="headerlink" title="与 minikube-vm 通信"></a>与 minikube-vm 通信</h3><p>从在浏览器中输入 URL 开始，浏览器完成自己的任务后，委托操作系统中的网络控制软件（协议栈）将消息发送给服务器。</p><p>我们可以忽略数据包在网络中传输的过程（交换机 -&gt; 路由器），关注网卡前后的传输路径，作为与 minikube-vm 通信的基本分析框架。</p><p>为了更直观的分析与 minikube-vm 通信的过程，我们会使用 Wireshark。</p><p>我们已经获得了访问对象服务器的IP地址，当然，我们已经明了 /etc/hosts 和 DNS。</p><p>接下来，我们跟踪一下网络包的转发过程。</p><h4 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a>查看路由表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ip route list</span><br><span class="line"></span><br><span class="line"><span class="comment"># default via 192.168.55.254 dev en0</span></span><br><span class="line"><span class="comment"># 127.0.0.0/8 via 127.0.0.1 dev lo0</span></span><br><span class="line"><span class="comment"># 192.168.99.0/24 dev vboxnet  scope link</span></span><br><span class="line"></span><br><span class="line">ip route get 192.168.99.100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 192.168.99.100 dev vboxnet0  src 192.168.99.1</span></span><br><span class="line"></span><br><span class="line">ip link show dev vboxnet0</span><br><span class="line"></span><br><span class="line">ip neigh show dev vboxnet0</span><br><span class="line"></span><br><span class="line">netstat -rn</span><br><span class="line"><span class="comment"># Routing tables</span></span><br><span class="line"><span class="comment"># Internet:</span></span><br><span class="line"><span class="comment"># Destination        Gateway            Flags        Refs      Use   Netif Expire</span></span><br><span class="line"><span class="comment"># default            192.168.55.254     UGSc          401        0     en0</span></span><br><span class="line"><span class="comment"># 127.0.0.1          127.0.0.1          UH              8    65400     lo0</span></span><br><span class="line"><span class="comment"># 192.168.99.100     8:0:27:e9:86:e4    UHLWIi          1      215 vboxnet   1149</span></span><br></pre></td></tr></table></figure><h4 id="Wireshark-抓包"><a href="#Wireshark-抓包" class="headerlink" title="Wireshark 抓包"></a>Wireshark 抓包</h4><p><img src="https://github.com/zhenyuanlau/cdn/blob/master/images/wireshark-ping-minikube-vm.png?raw=true" alt="Ruby Object System"></p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>见 《深入理解计算机网络》</p><h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><p>见 《深入理解分布式系统》</p><h2 id="Kubernetes-对象"><a href="#Kubernetes-对象" class="headerlink" title="Kubernetes 对象"></a>Kubernetes 对象</h2><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><h2 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h2><ol><li>添加 remote 配置, 复制 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</li><li>粘贴到 K8S 的 deployment，JVM 参数</li><li>本地执行 kubectl -n <em>namespace</em> port-forward <em>name</em> 5005:5005</li><li>启动</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/35054568" target="_blank" rel="noopener">解读 ip 命令展示的网络连接信息</a></li><li><a href="https://www.freebsd.org/doc/zh_CN/books/handbook/network-routing.html" target="_blank" rel="noopener">FreeBSD 使用手册-高级网络-网关和路由</a></li><li><a href="https://jimmysong.io/kubernetes-handbook/" target="_blank" rel="noopener">Kubernetes中文指南/云原生应用架构实践手册</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超赞网站合集</title>
      <link href="/2019/07/27/awesome-website/"/>
      <url>/2019/07/27/awesome-website/</url>
      
        <content type="html"><![CDATA[<p>真棒 网站!</p><a id="more"></a><h2 id="网站列表"><a href="#网站列表" class="headerlink" title="网站列表"></a>网站列表</h2><ul><li><a href="https://asmcn.icopy.site/" target="_blank" rel="noopener">超赞合集</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Awesome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超赞软件合集</title>
      <link href="/2019/07/25/awesome-software/"/>
      <url>/2019/07/25/awesome-software/</url>
      
        <content type="html"><![CDATA[<p>超赞软件索引！</p><p>曾经有一个超赞的软件我使用了很久，但是我没有收藏，等到换了电脑，忘了软件名称时才后悔莫及，那份悔恨记忆犹新。</p><p>如果可以给我一个机会再来一次的话，我会创建一个文档———超赞软件合集，我希望养成一个习惯，记下我遇到的每一个好软件。</p><a id="more"></a><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><ul><li><a href="https://pqrs.org/osx/karabiner/" target="_blank" rel="noopener">Karabiner</a> A powerful and stable keyboard customizer for macOS.</li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><ul><li><a href="https://www.one-tab.com/help" target="_blank" rel="noopener">OneTab</a></li><li><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en" target="_blank" rel="noopener">Vimium</a></li><li><a href="https://chrome.google.com/webstore/detail/motivation/ofdgfpchbidcgncgfpdlpclnpaemakoj?hl=en" target="_blank" rel="noopener">Motivation</a></li></ul><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager" target="_blank" rel="noopener">Project Manager</a></li></ul><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><ul><li><a href="https://skywalking.apache.org/zh/" target="_blank" rel="noopener">Apache SkyWalking</a></li></ul><h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><ul><li><a href="https://github.com/brona/iproute2mac" target="_blank" rel="noopener">iproute2mac</a></li><li><a href="https://github.com/websockets/wscat" target="_blank" rel="noopener">wscat</a></li><li><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-macos" target="_blank" rel="noopener">kubernetes-cli</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wscat -c wss://&lt;url&gt;/</span><br><span class="line"></span><br><span class="line">kubectl -n &lt;namespace&gt; port-forward &lt;pod&gt; 8088:8088</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-wscat.html" target="_blank" rel="noopener">Use wscat to Connect to a WebSocket API</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Awesome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thin 原理剖析</title>
      <link href="/2019/07/25/thin-under-a-microscope/"/>
      <url>/2019/07/25/thin-under-a-microscope/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Thin - A small and fast Ruby web server</p></blockquote><a id="more"></a><h2 id="前提知识"><a href="#前提知识" class="headerlink" title="前提知识"></a>前提知识</h2><h3 id="IO-模型"><a href="#IO-模型" class="headerlink" title="IO 模型"></a>IO 模型</h3><p>类 Unix I/O 系统的基本模型是一个能够被随机访问或有序访问的字节序列，进一步抽象为一个数据字节流或一个 IO 流。无论怎样，用户空间不能去访问和控制。</p><h4 id="流"><a href="#流" class="headerlink" title="流"></a>流</h4><p>简单的理解，流就是 IO 对象。</p><h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><p>在 *nix 中，一切皆文件。每个文件都有一个文件描述符作为文件的引用。文件、管道、套接字都可以被文件描述符引用。</p><h4 id="IO-调用"><a href="#IO-调用" class="headerlink" title="IO 调用"></a>IO 调用</h4><h4 id="IO-执行"><a href="#IO-执行" class="headerlink" title="IO 执行"></a>IO 执行</h4><h4 id="IO-in-Ruby"><a href="#IO-in-Ruby" class="headerlink" title="IO in Ruby"></a>IO in Ruby</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">io = IO.new(<span class="number">1</span>)</span><br><span class="line">io.puts <span class="string">'Hello, 世界'</span></span><br></pre></td></tr></table></figure><p>Ruby 的 IO 对象</p><ul><li>IO</li><li>File</li><li>Socket</li><li>StringIO</li><li>Tempfile</li></ul><h4 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h4><h5 id="Socket-可读条件"><a href="#Socket-可读条件" class="headerlink" title="Socket 可读条件"></a>Socket 可读条件</h5><h5 id="Socket-可写条件"><a href="#Socket-可写条件" class="headerlink" title="Socket 可写条件"></a>Socket 可写条件</h5><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h3 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布/订阅模式"></a>发布/订阅模式</h3><h3 id="事件驱动模式"><a href="#事件驱动模式" class="headerlink" title="事件驱动模式"></a>事件驱动模式</h3><p>事件发射器（EventEmitter）一个简单实现，内部使用一个 hash 存储事件名及事件处理器（可调用对象），使用延迟调用技术实现。</p><ul><li>emitter.on(eventName, listener)</li></ul><blockquote><p>Adds the listener function to the end of the listeners array for the event named eventName. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of eventName and listener will result in the listener being added, and called, multiple times.</p></blockquote><ul><li>emitter.emit(eventName[, …args])</li></ul><blockquote><p>Synchronously calls each of the listeners registered for the event named eventName, in the order they were registered, passing the supplied arguments to each.</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">EventEmitter</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_handler_queue</span></span></span><br><span class="line">    @_handler_queue <span class="params">||</span>= Hash.new &#123; <span class="params">|event_name, handler|</span> h[event_name] = [] &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">on</span><span class="params">(event_name, &amp;handler)</span></span></span><br><span class="line">    _handler_queue[event_name] &lt;&lt; handler</span><br><span class="line">    <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">emit</span><span class="params">(event_name, *args)</span></span></span><br><span class="line">    _handler_queue[event_name].each <span class="keyword">do</span> <span class="params">|handler|</span></span><br><span class="line">      handler.call(*args)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>事件循环（EventLoop）一个简单实现</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventLoop</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:event_queue</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @event_queue = []</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">&lt;&lt;</span><span class="params">(event)</span></span></span><br><span class="line">    @event_queue &lt;&lt; event</span><br><span class="line">    event.on(<span class="symbol">:close</span>) <span class="keyword">do</span></span><br><span class="line">      @event_queue.delete(event)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">io</span><span class="params">(io)</span></span></span><br><span class="line">    event = Event.new(io)</span><br><span class="line">    <span class="keyword">self</span> &lt;&lt; event</span><br><span class="line">    event</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(file, *args)</span></span></span><br><span class="line">    io File.open(file, *args)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(host, port)</span></span></span><br><span class="line">    io TCPSocket.new(host, port)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">listen</span><span class="params">(host, port)</span></span></span><br><span class="line">    server = Server.new(TCPServer.new(host, port))</span><br><span class="line">    <span class="keyword">self</span> &lt;&lt; server</span><br><span class="line">    server.on(<span class="symbol">:accept</span>) <span class="keyword">do</span> <span class="params">|connection|</span></span><br><span class="line">      <span class="keyword">self</span> &lt;&lt; connection</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    server</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span></span></span><br><span class="line">    @running = <span class="literal">true</span></span><br><span class="line">    tick <span class="keyword">while</span> @running</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">stop</span></span></span><br><span class="line">    @running = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">tick</span></span></span><br><span class="line">    @event_queue.each <span class="keyword">do</span> <span class="params">|event|</span></span><br><span class="line">      event.handle_read  <span class="keyword">if</span> event.readable?</span><br><span class="line">      event.handle_write <span class="keyword">if</span> event.writable?</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/43933717" target="_blank" rel="noopener">一文读懂高性能网络编程中的I/O模型</a></li><li><a href="https://draveness.me/rack-thin" target="_blank" rel="noopener">浅谈 Thin 的事件驱动模型</a></li><li><a href="https://nodejs.org/api/events.html" target="_blank" rel="noopener">Node.js v12.7.0 Documentation</a></li><li><a href="https://practicingruby.com/articles/event-loops-demystified" target="_blank" rel="noopener">Event loops demystified</a></li><li><a href="https://blog.insiderattack.net/event-loop-and-the-big-picture-nodejs-event-loop-part-1-1cb67a182810" target="_blank" rel="noopener">Event Loop and the Big Picture — NodeJS Event Loop Part 1</a></li><li><a href="https://eklitzke.org/how-tcp-sockets-work" target="_blank" rel="noopener">How TCP Sockets Work</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Microscope </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超赞文章合集</title>
      <link href="/2019/07/24/awesome-article/"/>
      <url>/2019/07/24/awesome-article/</url>
      
        <content type="html"><![CDATA[<p>好文章！</p><a id="more"></a><h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><ul><li style="list-style: none"><input type="checkbox" checked> <a href="https://practicingruby.com/articles/event-loops-demystified" target="_blank" rel="noopener">Event loops demystified</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://zhuanlan.zhihu.com/p/38395184" target="_blank" rel="noopener">NodeJS事件循环 Part 1</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://eklitzke.org/how-tcp-sockets-work" target="_blank" rel="noopener">How TCP Sockets Work</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://www.linusakesson.net/programming/tty/" target="_blank" rel="noopener">The TTY demystified</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://io-meter.com/2018/02/09/A-summary-of-designing-schedulers/" target="_blank" rel="noopener">集群资源调度系统设计架构总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Awesome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Article </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重拾 CSS</title>
      <link href="/2019/07/13/fall-with-css-again/"/>
      <url>/2019/07/13/fall-with-css-again/</url>
      
        <content type="html"><![CDATA[<p>每天半小时，在“肥仔”旁边看书，最近看《精通 CSS》，“肥仔”是我的同事，搞前端。</p><p>摘录了书中的知识框架，需要填充一些细节，又感觉无趣，不搞前端有段时间了，工作中没有机会，稍记后补。</p><p>响应式布局——页面布局——内容布局——定位——浮动及清除——排版和特效。</p><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>通过关注点分离，在宏观上将网页拆分为结构、样式、行为三个方面。HTML 负责结构，CSS 负责样式，JavaScript 负责行为，简直完美！<br>当然，关注点分离策略可以具体到每个方面。</p><p>渐进增强是另一个总要的策略，保持特性向后兼容。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>HTML 负责网页的结构，创建结构化、语义化 HTML 文档是添加样式/行为的基础。</p><p>语义化标签：</p><ul><li>header</li><li>nav</li><li>main</li><li>aside</li><li>article</li><li>footer</li></ul><p>扩展 HTML 语义？</p><h3 id="包装元素"><a href="#包装元素" class="headerlink" title="包装元素"></a>包装元素</h3><p>尽可能保持最简结构，必要时添加包装元素，以支持浮动、定位、布局。</p><h3 id="接入点"><a href="#接入点" class="headerlink" title="接入点"></a>接入点</h3><p>基于适当的样式接入点，利用多种选择器，应用样式规则。</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li>ID 选择器</li><li>类型选择器</li><li>类选择器</li><li>后代选择器</li><li>子选择器</li><li>同辈选择器</li><li>通用选择器</li><li>属性选择器</li><li>伪元素选择器</li><li>伪类（结构化伪类、表单伪类）</li></ul><h3 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h3><ol><li>标注为 !important 的用户样式；</li><li>标注为 !important 的作者样式；</li><li>作者样式；</li><li>用户样式；</li><li>浏览器（或用户代码）的默认样式。</li></ol><h3 id="特殊性"><a href="#特殊性" class="headerlink" title="特殊性"></a>特殊性</h3><p>基于位置计算规则的特殊性，不同选择器对应不同的数值，规则的特殊性等于每个选择器的累加数值。</p><ul><li>行内样式，a 为 1；</li><li>b 等于 ID 选择器的数目；</li><li>c 等于类选择器、伪类选择器、属性选择器的数目；</li><li>d 等于类型选择器和伪元素选择器的数目。</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h3 id="层叠次序"><a href="#层叠次序" class="headerlink" title="层叠次序"></a>层叠次序</h3><p>重要性高的样式覆盖重要性低的样式；特殊性高的样式覆盖特殊性低的样式；后定义的样式覆盖先定义的样式。</p><h3 id="应用样式"><a href="#应用样式" class="headerlink" title="应用样式"></a>应用样式</h3><ol><li>行内样式；</li><li>内联样式；</li><li>外部样式；</li></ol><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>宽度、高度、内边距、边框、外边距。</p><h3 id="块级盒子"><a href="#块级盒子" class="headerlink" title="块级盒子"></a>块级盒子</h3><p>从上到下，垂直堆叠。</p><h3 id="行内盒子"><a href="#行内盒子" class="headerlink" title="行内盒子"></a>行内盒子</h3><p>从左到右，水平展开。</p><h3 id="行盒子"><a href="#行盒子" class="headerlink" title="行盒子"></a>行盒子</h3><p>一行文本构成一个行盒子。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名盒子"><a href="#匿名盒子" class="headerlink" title="匿名盒子"></a>匿名盒子</h3><h3 id="格式化上下文（模型）"><a href="#格式化上下文（模型）" class="headerlink" title="格式化上下文（模型）"></a>格式化上下文（模型）</h3><h4 id="包含块-起始包含块"><a href="#包含块-起始包含块" class="headerlink" title="包含块/起始包含块"></a>包含块/起始包含块</h4><h4 id="外边距折叠"><a href="#外边距折叠" class="headerlink" title="外边距折叠"></a>外边距折叠</h4><p>在正常文档流中，块级盒子发生外边距折叠。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(2, 1fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(5, 1fr);</span><br><span class="line">  <span class="attribute">grid-column-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">grid-row-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内容布局"><a href="#内容布局" class="headerlink" title="内容布局"></a>内容布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flexbox</span> <span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flexbox</span> <span class="selector-class">.col</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flexbox</span> <span class="selector-class">.col</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">float</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 清除</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><h2 id="特效"><a href="#特效" class="headerlink" title="特效"></a>特效</h2><h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h3><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h3 id="滤镜"><a href="#滤镜" class="headerlink" title="滤镜"></a>滤镜</h3>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sinatra 原理剖析</title>
      <link href="/2019/07/13/sinatra-under-a-microscope/"/>
      <url>/2019/07/13/sinatra-under-a-microscope/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Sinatra 是一门基于 Ruby 的领域专属语言，致力于轻松、快速地创建网络应用。</p></blockquote><p>剖析 Sinatra 有助于进一步了解 Rack 的工作原理，有助于了解一个 Web 框架的应有的特性及其实现。</p><p>Sinatra 的实现涉及到正则表达式、Ruby 元编程特性，还有 HTTP 相关知识，在剖析的过程中，都可以进行回顾和总结。</p><a id="more"></a><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>摘自 <a href="http://sinatrarb.com/" target="_blank" rel="noopener">Sinatra</a> 官网。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.rb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></span><br><span class="line">get <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="string">'Hello, 世界!'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby app.rb</span><br></pre></td></tr></table></figure><p>在浏览器中访问 <a href="http://localhost:4567/" target="_blank" rel="noopener">http://localhost:4567/</a>。</p><h2 id="程序是怎样跑起来的"><a href="#程序是怎样跑起来的" class="headerlink" title="程序是怎样跑起来的"></a>程序是怎样跑起来的</h2><p>Sinatra 是怎样启动 Thin 服务器的？<br>Sinatra 是如何响应请求的？</p><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p><a href="https://www.rubyguides.com/2017/08/how-does-sinatra-work/" target="_blank" rel="noopener">Sinatra 工作原理</a> &amp; <a href="https://github.com/zhengjia/sinatra-explained" target="_blank" rel="noopener">Sinatra Explained</a> 都解释了 Sinatra 的启动过程。</p><p>让我们一起跟踪一下 Sinatra 的启动过程：</p><p>打开 pry ！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></span><br><span class="line"><span class="comment"># =&gt; true</span></span><br><span class="line">get <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="string">'Hello, 世界!'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># =&gt; [#&lt;Mustermann::Sinatra:"/"&gt;, [], #&lt;Proc:0x00007fc84f3925a0@/sinatra/base.rb:1635&gt;]</span></span><br><span class="line"><span class="comment"># 延迟执行</span></span><br></pre></td></tr></table></figure><p>在 pry 中运行例子程序，是不会启动 Thin 的。那 Thin 是如何被启动的？其实不需要太多尝试，Thin 的启动应该发生在 app.rb 运行之后，这怎么可能做到？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lib/sinatra/main.rb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Sinatra</span></span></span><br><span class="line">  <span class="comment"># ...snip...</span></span><br><span class="line">  at_exit &#123; Application.run! <span class="keyword">if</span> $!.<span class="literal">nil</span>? &amp;&amp; Application.run? &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在 app.rb 运行结束之后，执行</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application.run! <span class="keyword">if</span> $!.<span class="literal">nil</span>? &amp;&amp; Application.run?</span><br></pre></td></tr></table></figure><blockquote><p>$!<br>The exception information message set by ‘raise’.<br>$0<br>Contains the name of the script being executed. May be assignable.</p></blockquote><p>进一步跟踪一下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lib/sinatra/main.rb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Sinatra</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Application</span> &lt; Base</span></span><br><span class="line">    set <span class="symbol">:run</span>, Proc.new &#123; File.expand_path($0) == File.expand_path(app_file) &#125;</span><br><span class="line">    <span class="comment"># ...snip...</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  at_exit &#123; Application.run! <span class="keyword">if</span> $!.<span class="literal">nil</span>? &amp;&amp; Application.run? &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Sinatra::Application.run?</span><br><span class="line"><span class="comment"># =&gt; true</span></span><br><span class="line"></span><br><span class="line">$ Sinatra::Application.run!</span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">  begin</span></span><br><span class="line"><span class="comment">    start_server(handler, server_settings, handler_name, &amp;block)</span></span><br><span class="line"><span class="comment">  rescue</span></span><br><span class="line"><span class="comment">    ...snip...</span></span><br><span class="line"><span class="comment">  end</span></span><br><span class="line"><span class="comment">=end</span></span><br><span class="line"></span><br><span class="line">$ Sinatra::Application.start_server</span><br><span class="line"><span class="comment"># -&gt; handler.run</span></span><br><span class="line"></span><br><span class="line">Sinatra::Application.send(<span class="symbol">:detect_rack_handler</span>)</span><br><span class="line"><span class="comment"># =&gt; Rack::Handler::Thin</span></span><br></pre></td></tr></table></figure><p>梳理一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Application.run! -&gt; Application.start_server -&gt; handler.start</span><br><span class="line"></span><br><span class="line">监听 4567 端口 !</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">extend Sinatra::Delegator</span><br><span class="line"><span class="comment"># 在顶层上下文中可以访问 get 方法</span></span><br><span class="line"></span><br><span class="line">$ get</span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line">define_method(method_name) <span class="keyword">do</span> <span class="params">|*args, &amp;block|</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>(*args, &amp;block) <span class="keyword">if</span> respond_to? method_name</span><br><span class="line">  Delegator.target.send(method_name, *args, &amp;block)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">呃？！</span><br></pre></td></tr></table></figure><p>经过整理，Sinatra 请求处理流程如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Sinatra</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(env)</span></span></span><br><span class="line">      dup.call!(env)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call!</span><span class="params">(env)</span></span></span><br><span class="line">      invoke &#123; dispatch! &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch!</span></span></span><br><span class="line">      route!</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">route!</span></span></span><br><span class="line">      route_eval &#123; [<span class="number">200</span>, &#123;&#125;, <span class="string">'Hello, Sinatra!'</span>] &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">route_eval</span></span></span><br><span class="line">      throw <span class="symbol">:halt</span>, <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">invoke</span></span></span><br><span class="line">      res = catch(<span class="symbol">:halt</span>) &#123; <span class="keyword">yield</span> &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">settings</span></span></span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(path, opts = &#123;&#125;, &amp;block)</span></span></span><br><span class="line">        route(<span class="string">'GET'</span>, path, opts, &amp;block)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(verb, path, options = &#123;&#125;, &amp;block)</span></span></span><br><span class="line">        @routes         = &#123;&#125;</span><br><span class="line">        (@routes[<span class="string">'GET'</span>] <span class="params">||</span>= []) &lt;&lt; [<span class="literal">nil</span>, [], block]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(env)</span></span></span><br><span class="line">        new.call(env)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Application</span> &lt; Base</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="代理的实现"><a href="#代理的实现" class="headerlink" title="代理的实现"></a>代理的实现</h3><p>如果我们想在顶层上下文中，引用 Sinatra::Base.get 方法，我们可以怎么做？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">get <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="string">"Hello, 世界"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; NoMethodError: undefined method `get' for main:Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># include would include the module in Object</span></span><br><span class="line"><span class="comment"># extend only extends the `main` object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></span><br><span class="line"></span><br><span class="line">extend Sinatra::Delegator</span><br></pre></td></tr></table></figure><p>在 Sinatra::Delegator 中定义私有方法，在顶层上下文中调用 extend Sinatra::Delegator，Sinatra::Delegator 的私有方法将成为 main 对象的私有方法，确切的说，是 main 的单件类的私有实例方法。</p><p>Sinatra::Delegator 实现如下，定义了一个类实例变量 target，作为代理目标，定义了一个类方法 delegate，使用 deleate 方法定义了一些列私有实例方法，代理到 target。代码实现如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Delegator</span> <span class="comment">#:nodoc:</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">delegate</span><span class="params">(*methods)</span></span></span><br><span class="line">    methods.each <span class="keyword">do</span> <span class="params">|method_name|</span></span><br><span class="line">      define_method(method_name) <span class="keyword">do</span> <span class="params">|*args, &amp;block|</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>(*args, &amp;block) <span class="keyword">if</span> respond_to? method_name</span><br><span class="line">        Delegator.target.send(method_name, *args, &amp;block)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      private method_name</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  delegate <span class="symbol">:get</span>, <span class="symbol">:patch</span>, <span class="symbol">:put</span>, <span class="symbol">:post</span>, <span class="symbol">:delete</span>, <span class="symbol">:head</span>, <span class="symbol">:options</span>, <span class="symbol">:link</span>, <span class="symbol">:unlink</span>,</span><br><span class="line">            <span class="symbol">:template</span>, <span class="symbol">:layout</span>, <span class="symbol">:before</span>, <span class="symbol">:after</span>, <span class="symbol">:error</span>, <span class="symbol">:not_found</span>, <span class="symbol">:configure</span>,</span><br><span class="line">            <span class="symbol">:set</span>, <span class="symbol">:mime_type</span>, <span class="symbol">:enable</span>, <span class="symbol">:disable</span>, <span class="symbol">:use</span>, <span class="symbol">:development?</span>, <span class="symbol">:test?</span>,</span><br><span class="line">            <span class="symbol">:production?</span>, <span class="symbol">:helpers</span>, <span class="symbol">:settings</span>, <span class="symbol">:register</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line">    <span class="keyword">attr_accessor</span> <span class="symbol">:target</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">self</span>.target = Application</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><blockquote><p>阅读代码时，应该尽可能地利用任何能够得到地文档。</p></blockquote><p><a href="http://sinatrarb.com/intro-zh.html" target="_blank" rel="noopener">Sinatra README</a><br><a href="https://www.rubyguides.com/2017/08/how-does-sinatra-work/" target="_blank" rel="noopener">Sinatra 工作原理</a><br><a href="https://github.com/zhengjia/sinatra-explained" target="_blank" rel="noopener">Sinatra Explained</a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>Sinatra 几乎包含了一个 Web 框架的所有特性。</p><ul><li>路由</li><li>浏览器重定向</li><li>静态文件</li><li>视图 / 模板</li><li>过滤器</li><li>辅助方法</li><li>错误处理</li><li>会话</li><li>日志</li><li>缓存控制</li><li>配置 &amp; 环境</li></ul><p>接下来，将对部分特性进行剖析。</p><h3 id="Rack-中间件"><a href="#Rack-中间件" class="headerlink" title="Rack 中间件"></a>Rack 中间件</h3><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>从责任/角色/协作视角看 Sinatra，我们可以获得哪些架构上的认知。</p><p>我们将 Sinatra 特性分为框架特性和非框架特性，如果将 Sinatra 看成是一个黑箱，那么框架特性在黑箱内部，非框架特性在黑箱边界。作为 Rack 应用，Sinatra 需要响应 call 方法，同时负责启动应用服务器。</p><p>Sinatra 将应用启动的责任分配给 Sinatra::Application，但是代理给 Sinatra::Base。其实，Sinatra::Application 的责任都代理给了 Sinatra::Base。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>Sinatra 使用标准的 Gem 项目结构，主要实现位于文件 main.rb 和 base.rb 中 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── sinatra</span><br><span class="line">│   ├── base.rb</span><br><span class="line">│   ├── images</span><br><span class="line">│   │   ├── 404.png</span><br><span class="line">│   │   └── 500.png</span><br><span class="line">│   ├── indifferent_hash.rb</span><br><span class="line">│   ├── main.rb</span><br><span class="line">│   ├── show_exceptions.rb</span><br><span class="line">│   └── version.rb</span><br><span class="line">└── sinatra.rb</span><br><span class="line"></span><br><span class="line">2 directories, 8 files</span><br></pre></td></tr></table></figure><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">brew install cloc</span><br><span class="line"></span><br><span class="line">cloc .</span><br><span class="line"></span><br><span class="line"><span class="comment"># sinatra (2.0.5)</span></span><br><span class="line"></span><br><span class="line">32 text files.</span><br><span class="line">32 unique files.</span><br><span class="line">6 files ignored.</span><br><span class="line"></span><br><span class="line">github.com/AlDanial/cloc v 1.82  T=0.16 s (167.6 files/s, 229647.0 lines/s)</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Markdown                        17           7457              0          25255</span><br><span class="line">Ruby                             9            430            345           2131</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">SUM:                            26           7887            345          27386</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sinatra::Base.set</span></span><br></pre></td></tr></table></figure><h4 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h4><p>在 Ruby 中，方法查找和方法调用是两个独立的过程，obj.methods 中的方法都是可以显式指定接收者的，obj.private_methods 中的方法只能通过隐式的接收者调用。</p><p>在编程过程中，其实不需要关注私有方法存在对象的类中还是单件类中。如果清楚其中的实现，当然更好！具体参看 *methods 的 API 文档。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line">private</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">a</span></span></span><br><span class="line">    <span class="string">'private a'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">a = A.new</span><br><span class="line">a.methods.<span class="keyword">include</span>? <span class="symbol">:a</span> <span class="comment"># =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">M</span></span></span><br><span class="line">private</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">m</span></span></span><br><span class="line">    <span class="string">'M#m'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">extend M</span><br><span class="line"><span class="keyword">self</span>.methods.<span class="keyword">include</span>? <span class="symbol">:m</span> <span class="comment"># =&gt; false</span></span><br><span class="line"><span class="keyword">self</span>.private_methods.<span class="keyword">include</span>? <span class="symbol">:m</span></span><br><span class="line">m <span class="comment">#=&gt; 'M#m'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line">private</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sm</span></span></span><br><span class="line">    <span class="string">'self#sm'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">self</span>.singleton_methods.<span class="keyword">include</span>? <span class="symbol">:sm</span> <span class="comment"># =&gt; false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Microscope </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 本地安装 Consul</title>
      <link href="/2019/07/12/macos-consul/"/>
      <url>/2019/07/12/macos-consul/</url>
      
        <content type="html"><![CDATA[<p>在 macOS 中，使用 Homebrew 安装 Consul，使用 HomebrewServices 启动 Consul，重启后数据丢失。记录解决方法如下。</p><a id="more"></a><h2 id="安装-Consul"><a href="#安装-Consul" class="headerlink" title="安装 Consul"></a>安装 Consul</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install consul</span><br></pre></td></tr></table></figure><h2 id="启动-Consul"><a href="#启动-Consul" class="headerlink" title="启动 Consul"></a>启动 Consul</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start consul</span><br></pre></td></tr></table></figure><h2 id="重启-Consul"><a href="#重启-Consul" class="headerlink" title="重启 Consul"></a>重启 Consul</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services restart consul</span><br></pre></td></tr></table></figure><p>重启 Consul 后，数据丢失！</p><p>Why? 修改 Consul 启动模式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># code /Users/user/Library/LaunchAgents/homebrew.mxcl.consul.plist 不起作用</span><br><span class="line"># code /usr/local/Cellar/consul/1.4.0/homebrew.mxcl.consul.plist</span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span>&gt;</span>SuccessfulExit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>homebrew.mxcl.consul<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/opt/consul/bin/consul<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>agent<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>-server<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>-data-dir<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/opt/consul/data<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>-bind<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>-bootstrap-expect<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>-ui<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>WorkingDirectory<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/var<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardErrorPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/var/log/consul.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardOutPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/var/log/consul.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Property-List-属性列表文件"><a href="#Property-List-属性列表文件" class="headerlink" title="Property List(属性列表文件)"></a>Property List(属性列表文件)</h2><blockquote><p>属性列表（Property List）文件是一种用来存储序列化后的对象的文件。<br>Plist文件通常用于储存用户设置，也可以用于存储捆绑的信息。<br>从Mac OS X 10.5开始，Apple也提供了用于编辑，创建和写入plist文件的接口。</p></blockquote><h2 id="Homebrew-Services"><a href="#Homebrew-Services" class="headerlink" title="Homebrew Services"></a>Homebrew Services</h2><p><a href="https://github.com/Homebrew/homebrew-services/blob/master/cmd/brew-services.rb" target="_blank" rel="noopener">brew-services</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重拾 Ruby</title>
      <link href="/2019/07/11/fall-with-ruby-again/"/>
      <url>/2019/07/11/fall-with-ruby-again/</url>
      
        <content type="html"><![CDATA[<p>从 2018 年底至今，写了快一年的 Scala 应用程序，重拾一下 Ruby。近乎涉及 Ruby 开发的所有方面，当然不可能全面。</p><a id="more"></a><p>写一份 Ruby 攻略，而不是写一份参考手册。</p><p>Ruby 进程/线程/网络编程，参看 <a href="https://draveness.me/rack" target="_blank" rel="noopener">谈谈 Rack 的协议与实现</a>。</p><p>通过 Ruby 的应用服务器设计与实现，理解 Ruby 进程/线程/网络编程。</p><h2 id="Ruby-编程"><a href="#Ruby-编程" class="headerlink" title="Ruby 编程"></a>Ruby 编程</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.times <span class="keyword">do</span></span><br><span class="line">  puts <span class="string">"Ruby is a programmer's best friend"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>使用 RVM 管理 Ruby 的版本；使用 Pry 替代 irb，Pry 是阅读 Ruby 项目源码的一件利器。</p><h4 id="RVM"><a href="#RVM" class="headerlink" title="RVM"></a><a href="https://rvm.io/" target="_blank" rel="noopener">RVM</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rvm list known</span><br><span class="line"></span><br><span class="line">rvm install ruby-head</span><br><span class="line"></span><br><span class="line">rvm use ruby-head</span><br><span class="line"></span><br><span class="line">rvm gemset list</span><br><span class="line"></span><br><span class="line">rvm gemset create dev</span><br><span class="line"></span><br><span class="line">rvm use --ruby-version ruby-head@dev</span><br></pre></td></tr></table></figure><h4 id="Pry"><a href="#Pry" class="headerlink" title="Pry"></a><a href="http://pryrepl.org/" target="_blank" rel="noopener">Pry</a></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'rack'</span></span><br><span class="line"></span><br><span class="line">$ Rack::Server.start</span><br><span class="line"></span><br><span class="line">$ Rack::Server<span class="comment">#initialize</span></span><br></pre></td></tr></table></figure><h3 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h3><p>实验驱动开发：读取-求值—打印-循环。快速实验 API 用法，一步步写出代码。</p><h3 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h3><h4 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h4><p>见 《Ruby 元编程》。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(text)</span></span></span><br><span class="line">    @text = text</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">welcome</span></span></span><br><span class="line">    @text</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">g = Greeting.new(<span class="string">'Hello, Ruby'</span>)</span><br><span class="line">g.instance_variables</span><br><span class="line">g.<span class="keyword">class</span></span><br><span class="line">g.<span class="keyword">class</span>.instance_methods(<span class="literal">false</span>)</span><br><span class="line">g.<span class="keyword">class</span>.superclass</span><br><span class="line">g.<span class="keyword">class</span>.ancestors</span><br><span class="line">g.singleton_class</span><br></pre></td></tr></table></figure><h4 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h4><p>见《函数式编程思想》。函数式语言特性，包括不变性、引用透明性、模式匹配、列表推导式、高阶函数、组合函数、函子、可应用函子、单子等。Ruby 支持部分函数式语言特性。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.map &#123; <span class="params">|item|</span> item * <span class="number">3</span> &#125;</span><br><span class="line">a.filter &#123; <span class="params">|item|</span> item.odd? &#125;</span><br><span class="line">a.reduce(<span class="number">0</span>) &#123; <span class="params">|a, b|</span> a + b &#125;</span><br></pre></td></tr></table></figure><h4 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h4><p>见《理解 Unix 进程》和《理解 Ruby 线程》。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thr = Thread.new &#123; puts <span class="string">"Whats the big deal"</span> &#125;</span><br><span class="line">thr.join</span><br></pre></td></tr></table></figure><h4 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h4><p><a href="https://www.codeotaku.com/journal/2018-06/asynchronous-ruby/index" target="_blank" rel="noopener">Asynchronous Ruby</a></p><h4 id="分布式编程"><a href="#分布式编程" class="headerlink" title="分布式编程"></a>分布式编程</h4><p>见 《分布式 Ruby 编程》。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Ruby 是一门通用语言，支持多种编程范式。Ruby 优雅而灵活，是程序员的朋友。</p><h2 id="Ruby-元编程"><a href="#Ruby-元编程" class="headerlink" title="Ruby 元编程"></a>Ruby 元编程</h2><p>一图胜千言。</p><p><img src="https://github.com/zhenyuanlau/cdn/blob/master/images/ruby-object-system.jpg?raw=true" alt="Ruby Object System"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">K</span>;</span> <span class="keyword">end</span></span><br><span class="line">o = K.new</span><br><span class="line"><span class="class"><span class="keyword">class</span> &lt;&lt; o</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">m</span></span></span><br><span class="line">    puts <span class="string">'#o #m'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">o.m</span><br></pre></td></tr></table></figure><h3 id="include-和-extend"><a href="#include-和-extend" class="headerlink" title="include 和 extend"></a>include 和 extend</h3><p>简单地说，Ruby 使用继承实现 include 和 extend。在 Ruby 中，include 和 extend 都是方法，不是关键字，虽然这样强调毫无应用价值。</p><h2 id="Ruby-原理剖析"><a href="#Ruby-原理剖析" class="headerlink" title="Ruby 原理剖析"></a>Ruby 原理剖析</h2><p>见 《Flex &amp;&amp; Bison》 和 《深入理解程序设计》。</p><h2 id="Ruby-进程"><a href="#Ruby-进程" class="headerlink" title="Ruby 进程"></a>Ruby 进程</h2><p>阅读 ruby/process.c。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">rb_define_global_function(<span class="keyword">const</span> <span class="keyword">char</span> *name, VALUE (*func)(ANYARGS), <span class="keyword">int</span> argc)</span><br><span class="line">&#123;</span><br><span class="line">    rb_define_module_function(rb_mKernel, name, func, argc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">rb_define_module_function(VALUE <span class="keyword">module</span>, <span class="keyword">const</span> <span class="keyword">char</span> *name, VALUE (*func)(ANYARGS), <span class="keyword">int</span> argc)</span><br><span class="line">&#123;</span><br><span class="line">    rb_define_private_method(<span class="keyword">module</span>, name, func, argc);</span><br><span class="line">    rb_define_singleton_method(<span class="keyword">module</span>, name, func, argc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ruby 对进程相关的系统调用进行了封装，但只使用了模块。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 摘自 《理解 Unix 进程》</span></span><br><span class="line"></span><br><span class="line">Process.pid  <span class="comment"># 进程皆有标识</span></span><br><span class="line"></span><br><span class="line">Process.ppid <span class="comment"># 进程皆有父</span></span><br><span class="line"></span><br><span class="line">STDIN.fileno</span><br><span class="line"></span><br><span class="line">STDOUT.fileno</span><br><span class="line"></span><br><span class="line">STDERR.fileno <span class="comment"># 进程皆有描述符</span></span><br><span class="line"></span><br><span class="line">Process.getrlimit(<span class="symbol">:NOFILE</span>) <span class="comment"># 进程皆有资源限制</span></span><br><span class="line"></span><br><span class="line">ENV <span class="comment"># 进程皆有环境</span></span><br><span class="line"></span><br><span class="line">ARGV <span class="comment"># 进程皆有参数</span></span><br><span class="line"></span><br><span class="line">$PROGRAM_NAME <span class="comment"># 进程皆有名</span></span><br><span class="line"></span><br><span class="line">exit <span class="number">0</span> <span class="comment"># 进程皆有退出码</span></span><br><span class="line"></span><br><span class="line">fork &#123; sleep <span class="number">3</span> &#125; <span class="comment"># 进程皆可衍生 -&gt; 孤儿进程，友好的进程</span></span><br><span class="line"></span><br><span class="line">Process.wait <span class="comment"># 进程可待 -&gt; 看顾进程, 僵尸进程</span></span><br><span class="line"></span><br><span class="line">trap(<span class="symbol">:INT</span>, <span class="string">"IGNORE"</span>) <span class="comment"># 进程皆可获得信号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程皆可互通</span></span><br><span class="line">reader, writer = IO.pipe  </span><br><span class="line">child_socket, parent_socket = Socket.pair(<span class="symbol">:UNIX</span>, <span class="symbol">:DGRAM</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">Process.daemon <span class="comment"># 守护进程</span></span><br><span class="line"></span><br><span class="line">IO.popen(<span class="string">'less'</span>, <span class="string">'w'</span>) &#123; <span class="params">|stream|</span> stream.puts <span class="string">'some data'</span> &#125; <span class="comment"># 生成终端进程</span></span><br></pre></td></tr></table></figure><p>关注 Ruby 进程生成、互通、信号等几个方面。</p><h2 id="Ruby-线程"><a href="#Ruby-线程" class="headerlink" title="Ruby 线程"></a>Ruby 线程</h2><p>由于 Ruby 的 GIL，Ruby 线程可以并发，但不能并行。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.main == Thread.current <span class="comment"># =&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="Ruby-网络编程"><a href="#Ruby-网络编程" class="headerlink" title="Ruby 网络编程"></a>Ruby 网络编程</h2><p>Ruby 网络编程，即 Socket 编程，重点在于理解 IO 模型。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'socket'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Client</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">socket = Socket.new(<span class="symbol">:INET</span>, <span class="symbol">:STREAM</span>)</span><br><span class="line"><span class="comment"># 绑定</span></span><br><span class="line"><span class="comment"># 连接</span></span><br><span class="line">remote_addr = Socket.pack_sockaddr_in(<span class="number">8888</span>, <span class="string">'0.0.0.0'</span>)</span><br><span class="line">socket.connect(remote_addr)</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">socket.close</span><br><span class="line"></span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">socket = Socket.new(<span class="symbol">:INET</span>, <span class="symbol">:STREAM</span>)</span><br><span class="line"><span class="comment"># 绑定</span></span><br><span class="line">addr = Socket.pack_sockaddr_in(<span class="number">8888</span>, <span class="string">'0.0.0.0'</span>)</span><br><span class="line">socket.bind(addr)</span><br><span class="line"><span class="comment"># 侦听</span></span><br><span class="line">socket.listen(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 接受</span></span><br><span class="line">connection, <span class="number">_</span> = socket.accept <span class="comment"># echo hi | nc localhost 8888</span></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">connection.close</span><br></pre></td></tr></table></figure><h2 id="Ruby-分布式编程"><a href="#Ruby-分布式编程" class="headerlink" title="Ruby 分布式编程"></a>Ruby 分布式编程</h2><h2 id="Ruby-应用"><a href="#Ruby-应用" class="headerlink" title="Ruby 应用"></a>Ruby 应用</h2><p>一图胜千言。</p><p><img src="https://github.com/zhenyuanlau/cdn/blob/master/images/ruby-web-app.jpg?raw=true" alt="Ruby Rack App"></p><h3 id="Rack"><a href="#Rack" class="headerlink" title="Rack"></a>Rack</h3><p><a href="https://www.rubydoc.info/github/rack/rack/master/file/SPEC" target="_blank" rel="noopener">Rack 接口规范</a></p><p>使用 Rack，需要提供一个可调用对象，取一个环境变量，返回一个包含 HTTP 响应状态码/响应头/响应体 的数组。<br>当 Ruby 应用服务器接受一个请求，将请求信息封装到一个环境变量中，调用应用对象，经过应用中间件处理，将返回的数组作为请求的响应信息。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.ru</span></span><br><span class="line">run Proc.new &#123; <span class="params">|env|</span> [<span class="string">'200'</span>, &#123;<span class="string">'Content-Type'</span> =&gt; <span class="string">'text/html'</span>&#125;, [<span class="string">'get rack\'d'</span>]] &#125;</span><br></pre></td></tr></table></figure><p>Rack 工作原理：执行 rackup 后，读取 config.ru 文件，获取 app 对象，当没有配置时，取默认应用服务器，取默认配置，取默认中间件对 app 对象封装成包含中间件的 app 对象，启动应用服务器。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ Rack::Server.start</span><br><span class="line"><span class="comment"># =&gt; server.run wrapped_app, options, &amp;blk</span></span><br><span class="line"></span><br><span class="line">$ Rack::Server<span class="comment">#server</span></span><br><span class="line"><span class="comment"># -&gt; Rack::Handler.default</span></span><br><span class="line"><span class="comment"># =&gt; Rack::Handler::Puma</span></span><br><span class="line"></span><br><span class="line">$ Rack::Server<span class="comment">#default_options</span></span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  :environment =&gt; 'development',</span></span><br><span class="line"><span class="comment">  :pid         =&gt; nil,</span></span><br><span class="line"><span class="comment">  :Port        =&gt; 9292,</span></span><br><span class="line"><span class="comment">  :Host        =&gt; 'localhost',</span></span><br><span class="line"><span class="comment">  :AccessLog   =&gt; [],</span></span><br><span class="line"><span class="comment">  :config      =&gt; "config.ru"</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">=end</span></span><br><span class="line"></span><br><span class="line">$ Rack::Server<span class="comment">#wrapped_app</span></span><br><span class="line"><span class="comment"># -&gt; Rack::Server#build_app</span></span><br><span class="line"><span class="comment"># -&gt; Rack::Server#app</span></span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line">cfgfile = <span class="symbol">:</span><span class="symbol">:File</span>.read(config)</span><br><span class="line">cfgfile.sub!(<span class="regexp">/^__END__\n.*\Z/m</span>, <span class="string">''</span>)</span><br><span class="line">app = Rack::Builder.new &#123;</span><br><span class="line">  run Proc.new &#123; <span class="params">|env|</span> [<span class="string">'200'</span>, &#123;<span class="string">'Content-Type'</span> =&gt; <span class="string">'text/html'</span>&#125;, [<span class="string">'get rack\'d'</span>]] &#125;</span><br><span class="line">&#125;.to_app</span><br><span class="line"></span><br><span class="line">$ Rack::Server<span class="comment">#build_app</span></span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">  def build_app(app)</span></span><br><span class="line"><span class="comment">    middleware[options[:environment]].reverse_each do |middleware|</span></span><br><span class="line"><span class="comment">      middleware = middleware.call(self) if middleware.respond_to?(:call)</span></span><br><span class="line"><span class="comment">      next unless middleware</span></span><br><span class="line"><span class="comment">      klass, *args = middleware</span></span><br><span class="line"><span class="comment">      app = klass.new(app, *args)</span></span><br><span class="line"><span class="comment">    end</span></span><br><span class="line"><span class="comment">    app</span></span><br><span class="line"><span class="comment">  end</span></span><br><span class="line"><span class="comment">=end</span></span><br><span class="line"></span><br><span class="line">$ Rack::Server.default_middleware_by_environment</span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  "deployment"=&gt;</span></span><br><span class="line"><span class="comment">  [[Rack::ContentLength],</span></span><br><span class="line"><span class="comment">    [Rack::Chunked],</span></span><br><span class="line"><span class="comment">    #&lt;Proc:0x00007fedad041738@/rack/server.rb:224 (lambda)&gt;,</span></span><br><span class="line"><span class="comment">    [Rack::TempfileReaper]</span></span><br><span class="line"><span class="comment">  ],</span></span><br><span class="line"><span class="comment"> "development"=&gt;</span></span><br><span class="line"><span class="comment">  [[Rack::ContentLength],</span></span><br><span class="line"><span class="comment">   [Rack::Chunked],</span></span><br><span class="line"><span class="comment">   #&lt;Proc:0x00007fedad040540@/rack/server.rb:224 (lambda)&gt;,</span></span><br><span class="line"><span class="comment">   [Rack::ShowExceptions],</span></span><br><span class="line"><span class="comment">   [Rack::Lint],</span></span><br><span class="line"><span class="comment">   [Rack::TempfileReaper]]</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure><p>可执行代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'rack'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">options</span></span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="symbol">:environment</span> =&gt; <span class="string">'development'</span>,</span><br><span class="line">      <span class="symbol">:pid</span>         =&gt; <span class="literal">nil</span>,</span><br><span class="line">      <span class="symbol">:Port</span>        =&gt; <span class="number">9292</span>,</span><br><span class="line">      <span class="symbol">:Host</span>        =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">      <span class="symbol">:AccessLog</span>   =&gt; [],</span><br><span class="line">      <span class="symbol">:config</span>      =&gt; <span class="string">"config.ru"</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">blk</span></span></span><br><span class="line">    <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">server</span></span></span><br><span class="line">    Rack::Handler::Thin</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">app</span></span></span><br><span class="line">    Rack::Builder.new &#123;</span><br><span class="line">      run Proc.new &#123; <span class="params">|env|</span> [<span class="string">'200'</span>, &#123;<span class="string">'Content-Type'</span> =&gt; <span class="string">'text/html'</span>&#125;, [<span class="string">'get rack\'d'</span>]] &#125;</span><br><span class="line">    &#125;.to_app</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Rack::Server.default_middleware_by_environment[<span class="string">'development'</span>].reverse_each <span class="keyword">do</span> <span class="params">|middleware|</span></span><br><span class="line">  middleware = middleware.call(<span class="keyword">self</span>) <span class="keyword">if</span> middleware.respond_to?(<span class="symbol">:call</span>)</span><br><span class="line">  <span class="keyword">next</span> <span class="keyword">unless</span> middleware</span><br><span class="line">  klass, *args = middleware</span><br><span class="line">  app = klass.new(app, *args)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">wrapped_app = app</span><br><span class="line"></span><br><span class="line">server.run wrapped_app, options, &amp;blk</span><br></pre></td></tr></table></figure><p>后面涉及两部分内容，一是 Ruby 应用服务器处理请求和响应请求，二是 Ruby 应用框架及 Ruby 应用的设计与实现。</p><h3 id="Sinatra"><a href="#Sinatra" class="headerlink" title="Sinatra"></a>Sinatra</h3><h4 id="Sinatra-应用"><a href="#Sinatra-应用" class="headerlink" title="Sinatra 应用"></a>Sinatra 应用</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></span><br><span class="line"></span><br><span class="line">get <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="string">'Hello world!'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $ ruby app.rb =&gt; http://localhost:4567</span></span><br></pre></td></tr></table></figure><p>入口在哪里？服务是怎么启动的？跟踪一下！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></span><br><span class="line"></span><br><span class="line">$ get</span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">  define_method(method_name) do |*args, &amp;block|</span></span><br><span class="line"><span class="comment">    return super(*args, &amp;block) if respond_to? method_name</span></span><br><span class="line"><span class="comment">    Delegator.target.send(method_name, *args, &amp;block)</span></span><br><span class="line"><span class="comment">  end</span></span><br><span class="line"><span class="comment">=end</span></span><br><span class="line"></span><br><span class="line">$ Sinatra::Delegator.target</span><br><span class="line"><span class="comment"># =&gt; attr_accessor :target</span></span><br><span class="line"><span class="comment"># =&gt; Application</span></span><br><span class="line"></span><br><span class="line">get <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="string">'Hello world!'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; [#&lt;Mustermann::Sinatra:"/"&gt;, [], #&lt;Proc:0x00007f9cba0c8f88@/sinatra/base.rb:1635&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 惊喜！获得一个可调用对象！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 入口!</span></span><br><span class="line"></span><br><span class="line">at_exit &#123; Application.run! <span class="keyword">if</span> $!.<span class="literal">nil</span>? &amp;&amp; Application.run? &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 app.rb 运行结束后执行</span></span><br><span class="line"></span><br><span class="line">handler = Sinatra::Application.send(<span class="symbol">:detect_rack_handler</span>)</span><br><span class="line"></span><br><span class="line">$ Sinatra::Application.run!</span><br><span class="line"><span class="comment"># -&gt; Sinatra::Application.start_server</span></span><br><span class="line"><span class="comment"># -&gt; handler.run</span></span><br></pre></td></tr></table></figure><p>看一下 at_exit：</p><blockquote><p>Converts block to a Proc object (and therefore binds it at the point of call) and registers it for execution when the program exits.<br>If multiple handlers are registered, they are executed in reverse order of registration.</p></blockquote><p>Sinatra 启动服务器的方式还是值得学习的！</p><h4 id="Sinatra-剖析"><a href="#Sinatra-剖析" class="headerlink" title="Sinatra 剖析"></a>Sinatra 剖析</h4><p>见 <a href="https://zhenyuanlau.github.io/2019/07/13/sinatra-under-a-microscope/">Sinatra 原理剖析</a></p><h3 id="Thin"><a href="#Thin" class="headerlink" title="Thin"></a>Thin</h3><h3 id="Rails"><a href="#Rails" class="headerlink" title="Rails"></a>Rails</h3><h3 id="Puma"><a href="#Puma" class="headerlink" title="Puma"></a>Puma</h3>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常处理的设计与重构</title>
      <link href="/2019/01/19/exception-processing/"/>
      <url>/2019/01/19/exception-processing/</url>
      
        <content type="html"><![CDATA[<p>《异常处理的设计与重构》较为系统地讲述了异常处理，但是叙述多为繁冗，在此提取实用的内容，摘录并整理如下（该书未涉及函数式异常处理）。</p><a id="more"></a><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常处理很重要，影响软件的健壮性，影响用户体验，继而影响公司的盈利。</p><p>关于异常处理，我们要了解以下定义：</p><ul><li>缺陷（fault）：瞬时缺陷/间歇缺陷/永久缺陷 | 设计缺陷/组件缺陷 | 开发缺陷/物理缺陷/交互缺陷</li><li>错误（error）</li><li>失败/失效（failure）</li><li>异常/例外（exception）：在程序设计语言中错误与失败的统称</li></ul><p>缺陷是错误的起因，可能会导致失败。</p><h2 id="异常上下文"><a href="#异常上下文" class="headerlink" title="异常上下文"></a>异常上下文</h2><p>异常上下文是当异常发生的时候，异常处理程序可以从异常对象所获得的相关信息。</p><p>设计语义清楚、层级分明的异常类。</p><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><ol><li>表达：如何表达异常？符号/异常实例/其他对象</li><li>声明：往外传递的异常是否需要声明？预期异常/非预期异常</li><li>通知：如何产生一个异常的实例？同步异常/异步异常|内部异常/外部异常</li><li>传递：如何传递异常？显式/隐式</li><li>附加：异常处理程序可绑定到何种程序区块？代码块/函数/对象/类</li><li>处理：针对异常，如何找到可以处理它的异常处理程序？静态范围/动态范围</li><li>继续：异常发生之后，程序的控制流程该如何进行？终止/恢复/重试</li><li>清理：无论是否发生异常，如何让程序清理资源以保持在正确的状态？</li><li>可靠性检查：因为异常处理机制所造成的问题，程序语言提供何种检查？静态检查/动态检查</li><li>并发性：程序语言对于并行处理程序，提供多少异常处理的支持？支持/不支持</li></ol><h2 id="异常安全性"><a href="#异常安全性" class="headerlink" title="异常安全性"></a>异常安全性</h2><ol><li>不保证（可能正确，也可能错误）</li><li>基本保证（无泄漏保证）</li><li>强烈保证（具备认可或复原/全部或没有的语义，要么成功，要么失败）</li><li>不抛保证（失效透明）</li></ol><h2 id="异常处理策略"><a href="#异常处理策略" class="headerlink" title="异常处理策略"></a>异常处理策略</h2><p>当程序执行时发生异常，首要任务就是要找到异常发生的根本原因，其次就是要厘清“谁该负责”处理这个异常。</p><p>确定服务的生产者和消费者，确定服务调用的前置条件和后置条件，确定异常处理责任。</p><p>所有的异常状况都有相应的报告。</p><p>报告语义清楚的异常，以便协助开发团队缩短事后除错时间。</p><p>针对不同的健壮性等级做不同的异常设计：错误报告 -&gt; 状态恢复 -&gt; 行为恢复。</p><p>考虑容错设计。</p><h2 id="缺陷处理方法"><a href="#缺陷处理方法" class="headerlink" title="缺陷处理方法"></a>缺陷处理方法</h2><ol><li>缺陷避免</li><li>缺陷容忍（通过错误检测与系统恢复手段，避免服务失效）</li><li>缺陷移除</li><li>缺陷预测</li></ol><h2 id="命令式异常处理"><a href="#命令式异常处理" class="headerlink" title="命令式异常处理"></a>命令式异常处理</h2><h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><ol><li>实现需求</li><li>为状态恢复做准备或制作检查点</li></ol><h3 id="Catch"><a href="#Catch" class="headerlink" title="Catch"></a>Catch</h3><ol><li>进行错误处理与缺陷处理</li><li>报告错误状况</li><li>控制重试流程</li></ol><h3 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h3><ol><li>释放资源</li><li>清除检查点</li></ol><h2 id="异常处理设计"><a href="#异常处理设计" class="headerlink" title="异常处理设计"></a>异常处理设计</h2><ol><li>用途观点（失败/通知）</li><li>设计观点（声明/未声明|预期异常/非预期异常）</li><li>处理观点（可恢复/不可恢复）</li><li>工具支持观点（提示/无提示）</li><li>流程观点</li></ol><p>要借助异常的上下文来确定异常的用途。</p><h2 id="异常处理坏味道"><a href="#异常处理坏味道" class="headerlink" title="异常处理坏味道"></a>异常处理坏味道</h2><ul><li>返回码</li><li>忽略已查异常</li><li>忽略异常</li><li>未保护主程序</li><li>空的异常处理程序</li><li>嵌套 Try 语句</li><li>粗心的资源清理</li></ul><h2 id="异常处理重构"><a href="#异常处理重构" class="headerlink" title="异常处理重构"></a>异常处理重构</h2><p>清除异常处理的坏味道（略)</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云音乐歌词爬虫</title>
      <link href="/2019/01/19/netease-music-lyric-crawler/"/>
      <url>/2019/01/19/netease-music-lyric-crawler/</url>
      
        <content type="html"><![CDATA[<p>自打使用 MacBook，就一直使用 Netease Music。最近听到林子祥的《在水中央》，感觉歌词雅致，旋律优美。想做一件事，把歌词爬下来，解析成带粤语拼音注解的歌词。</p><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import sys</span></span><br><span class="line"><span class="comment"># sys.path.append('/Users/zhenyuanlau/GitHub/kata/crawler/netease-music/')</span></span><br><span class="line"><span class="comment"># import demo</span></span><br><span class="line"><span class="comment"># import importlib</span></span><br><span class="line"><span class="comment"># importlib.reload(demo)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">http_get</span><span class="params">(url)</span>:</span></span><br><span class="line">  headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'http://music.163.com'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'music.163.com'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">return</span> requests.get(url, headers = headers)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'request error'</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_artist_info</span><span class="params">(html)</span>:</span></span><br><span class="line">  soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">  links = soup.find(<span class="string">'ul'</span>, class_ = <span class="string">'f-hide'</span>).find_all(<span class="string">'a'</span>)</span><br><span class="line">  song_ids = []</span><br><span class="line">  song_names = []</span><br><span class="line">  <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">    song_id = link.get(<span class="string">'href'</span>).split(<span class="string">'='</span>)[<span class="number">-1</span>]</span><br><span class="line">    song_name = link.get_text()</span><br><span class="line">    song_ids.append(song_id)</span><br><span class="line">    song_names.append(song_name)</span><br><span class="line">  <span class="keyword">return</span> zip(song_names, song_ids)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_lyric</span><span class="params">(song_id)</span>:</span></span><br><span class="line">  url = <span class="string">f'http://music.163.com/api/song/lyric?id=<span class="subst">&#123;str(song_id)&#125;</span>&amp;lv=1&amp;kv=1&amp;tv=-1'</span></span><br><span class="line">  response = http_get(url).json()</span><br><span class="line">  initial_lyric = response[<span class="string">'lrc'</span>][<span class="string">'lyric'</span>]</span><br><span class="line">  regex = re.compile(<span class="string">r'\[.*\]'</span>)</span><br><span class="line">  final_lyric = re.sub(regex, <span class="string">''</span>, initial_lyric).strip()</span><br><span class="line">  <span class="keyword">return</span> final_lyric</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_lyric</span><span class="params">(song_name, lyric)</span>:</span></span><br><span class="line">  print(<span class="string">f'正在写入歌曲: <span class="subst">&#123;song_name&#125;</span>'</span>)</span><br><span class="line">  <span class="keyword">with</span> open(<span class="string">f'/tmp/lyrics/<span class="subst">&#123;song_name&#125;</span>.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(lyric)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_lyric</span><span class="params">(song_name)</span>:</span></span><br><span class="line">  <span class="comment"># print(sys.getdefaultencoding())</span></span><br><span class="line">  <span class="keyword">with</span> open(<span class="string">f'/tmp/lyrics/<span class="subst">&#123;song_name&#125;</span>.txt'</span>, <span class="string">'rt'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    data = fp.read().replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">    print(set(data))</span><br><span class="line">    <span class="comment"># for line in fp:</span></span><br><span class="line">    <span class="comment">#   print(line)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'/tmp/lyrics'</span>):</span><br><span class="line">    os.makedirs(<span class="string">'/tmp/lyrics'</span>)</span><br><span class="line">  artist_id = input(<span class="string">'请输入艺人 ID: '</span>)</span><br><span class="line">  artist_url = <span class="string">f'http://music.163.com/artist?id=<span class="subst">&#123;artist_id&#125;</span>'</span></span><br><span class="line">  response = http_get(artist_url).text</span><br><span class="line">  artist_infos = get_artist_info(response)</span><br><span class="line">  <span class="keyword">for</span> artist_info <span class="keyword">in</span> artist_infos:</span><br><span class="line">    lyric = get_lyric(artist_info[<span class="number">1</span>])</span><br><span class="line">    write_lyric(artist_info[<span class="number">0</span>], lyric)</span><br></pre></td></tr></table></figure><h2 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h2><p>Python 跟 Ruby 一样，提供了一个交互式编程环境。</p><h3 id="Python-安装"><a href="#Python-安装" class="headerlink" title="Python 安装"></a>Python 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> python=<span class="string">'python3'</span></span><br><span class="line"><span class="built_in">alias</span> pip=<span class="string">'pip3'</span></span><br></pre></td></tr></table></figure><h3 id="Python-包管理"><a href="#Python-包管理" class="headerlink" title="Python 包管理"></a>Python 包管理</h3><p>Ruby 有好用的 Bundler；Python 显得凌乱一些，pip/virtualenv/pipenv，选择 pipenv，最接近 Bundler。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip freeze | xargs pip uninstall -y</span><br><span class="line">pipenv install requests</span><br><span class="line">pipenv install lxml <span class="comment"># 一直 locking, SBT, Ctrl-C</span></span><br><span class="line">pipenv install <span class="comment"># OK</span></span><br><span class="line">pipenv python music/lyric.py</span><br></pre></td></tr></table></figure><h3 id="Python-入门"><a href="#Python-入门" class="headerlink" title="Python 入门"></a>Python 入门</h3><p><a href="http://www.pythondoc.com/pythontutorial3/index.html" target="_blank" rel="noopener">Python 入门指南</a><br><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">Python Cookbook 3rd Edition Documentation</a></p><h3 id="Python-实践"><a href="#Python-实践" class="headerlink" title="Python 实践"></a>Python 实践</h3><p>就语言层面，比 Scala 好上手多了，大概有 Ruby 开发经验的缘故。</p><p>工作中使用 Python 写数据迁移脚本。</p><h2 id="待做"><a href="#待做" class="headerlink" title="待做"></a>待做</h2><p>生成注解版本歌词。</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GRPC</title>
      <link href="/2019/01/02/grpc/"/>
      <url>/2019/01/02/grpc/</url>
      
        <content type="html"><![CDATA[<p>使用 gRPC 实现微服务间通信。</p><a id="more"></a><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p><em>进程是 Unix的两大基石之一，另一个是文件。理解Unix进程，有利于理解Unix编程模型。</em></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>进程 - 守护进程/终端进程、孤儿进程、友好进程、僵尸进程。</p><p>进程皆有 标识、父亲、文件描述符、资源限制、环境、参数、名字、退出码。</p><p>进程皆可 衍生、等待、获得信号、互通。</p><p><em>以上是Unix进程相关的基本概念，取自《理解Unix进程》的目录。</em></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标识</span></span><br><span class="line">puts Process.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 父进程</span></span><br><span class="line">puts Process.ppid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件描述符</span></span><br><span class="line">passwd = File.open(<span class="string">'/etc/passwd'</span>)</span><br><span class="line">puts passwd.fileno</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准流</span></span><br><span class="line">puts STDIN.fileno</span><br><span class="line">puts STDOUT.fileno</span><br><span class="line">puts STDERR.fileno</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软限制</span></span><br><span class="line">p Process.getrlimit(<span class="symbol">:NOFILE</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境</span></span><br><span class="line">p ENV</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数</span></span><br><span class="line">p ARGV</span><br><span class="line"></span><br><span class="line"><span class="comment"># 名字</span></span><br><span class="line">p $PROGRAM_NAME</span><br><span class="line"></span><br><span class="line"><span class="comment"># 衍生</span></span><br><span class="line">fork <span class="keyword">do</span></span><br><span class="line">  p Process.ppid</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h3><p>本文奉行一个观点，即无需了解底层的实现，重点应该放在如何使用API实现有用的功能，并尽可能关注如何完成实际任务。<br>不过有时候，不够了解底层实现会无法正确地使用某种特性。这种情况下，需要了解一些必要的细节，以便理解某些概念。</p><p>本文主要关注 Unix 进程互通，即进程间通信。</p><h2 id="进程间通信-IPC"><a href="#进程间通信-IPC" class="headerlink" title="进程间通信 IPC"></a>进程间通信 IPC</h2><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><h4 id="匿名管道-Pipe"><a href="#匿名管道-Pipe" class="headerlink" title="匿名管道(Pipe)"></a>匿名管道(Pipe)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls | sort -n</span><br></pre></td></tr></table></figure><h4 id="命名管道-FIFO"><a href="#命名管道-FIFO" class="headerlink" title="命名管道(FIFO)"></a>命名管道(FIFO)</h4><p>进程 Reader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">pipe=/tmp/pipe</span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> <span class="string">"rm -f <span class="variable">$pipe</span>"</span> EXIT</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ ! -p <span class="variable">$pipe</span> ]]; <span class="keyword">then</span></span><br><span class="line">    mkfifo <span class="variable">$pipe</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">read</span> line &lt;<span class="variable">$pipe</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$line</span>"</span> == <span class="string">'quit'</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Reader exiting"</span></span><br></pre></td></tr></table></figure><p>进程 Writer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">pipe=/tmp/pipe</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ ! -p <span class="variable">$pipe</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Reader not running"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$1</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span>"</span> &gt;<span class="variable">$pipe</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Hello from $$"</span> &gt;<span class="variable">$pipe</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>进程 Reader 通过 mkfifo 创建一个命名管道，并读取管道内容；进程 Writer 向命名管道写入内容。</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>用于具有亲缘关系（父子关系、兄弟关系）的进程间通信，用户自己创建管道，并完成读写操作。</p><h3 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h3><h4 id="服务器（侦听者）"><a href="#服务器（侦听者）" class="headerlink" title="服务器（侦听者）"></a>服务器（侦听者）</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'socket'</span></span><br><span class="line"></span><br><span class="line">Socket.tcp_server_loop(<span class="number">8888</span>) <span class="keyword">do</span> <span class="params">|connection|</span></span><br><span class="line">  puts connection.read</span><br><span class="line">  connection.close</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="客户端（发起者）"><a href="#客户端（发起者）" class="headerlink" title="客户端（发起者）"></a>客户端（发起者）</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Socket.tcp(<span class="string">'0.0.0.0'</span>, <span class="number">8888</span>) <span class="keyword">do</span> <span class="params">|connection|</span></span><br><span class="line">  connection.write<span class="string">"GET / HTTP/1.1\r\n"</span></span><br><span class="line">  connection.close</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>本地 IPC 使用Unix域套接字; 远程IPC 使用TCP 套接字。</p><h2 id="远程过程调用RPC"><a href="#远程过程调用RPC" class="headerlink" title="远程过程调用RPC"></a>远程过程调用RPC</h2><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><h4 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h4><p>Caller &lt;– call/return —&gt; Client Stub &lt;– send/receive —&gt; Server Stub &lt;– call/return —&gt; Callee</p><h4 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h4><h5 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'socket'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerStub</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span></span></span><br><span class="line">      stub = ServerStub.new(<span class="number">8888</span>)</span><br><span class="line">      stub.run</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(port)</span></span></span><br><span class="line">    @server = TCPServer.new(port)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span></span></span><br><span class="line">    Socket.accept_loop(@server) <span class="keyword">do</span> <span class="params">|connection|</span></span><br><span class="line">      request = connection.read</span><br><span class="line">      method, args = Marshal.load(request)</span><br><span class="line">      response = send(method.to_sym, *args)</span><br><span class="line">      data = Marshal.dump(response)</span><br><span class="line">      connection.write(data)</span><br><span class="line">      connection.close</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">method_missing</span><span class="params">(name, *args)</span></span></span><br><span class="line">    <span class="string">'hi'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ServerStub.start</span><br></pre></td></tr></table></figure><h5 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'socket'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Client Stub</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientStub</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(address)</span></span></span><br><span class="line">    @host, @port = address.split(<span class="string">':'</span>)</span><br><span class="line">    @client = TCPSocket.new(@host, @port)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">method_missing</span><span class="params">(name, *args)</span></span></span><br><span class="line">    data = Marshal.dump([name, args])</span><br><span class="line">    @client.write(data)</span><br><span class="line">    @client.close_write</span><br><span class="line">    data = @client.read</span><br><span class="line">    message = Marshal.load(data)</span><br><span class="line">    @client.close</span><br><span class="line">    message</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span></span><br><span class="line">      stub = ClientStub.new(<span class="string">'localhost:8888'</span>)</span><br><span class="line">      message = stub.greet(<span class="string">'hello'</span>)</span><br><span class="line">      p <span class="string">"Greeting: <span class="subst">#&#123;message&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Client.main</span><br></pre></td></tr></table></figure><h4 id="支撑技术"><a href="#支撑技术" class="headerlink" title="支撑技术"></a>支撑技术</h4><ol><li>服务注册与发现</li><li>网络通信</li><li>序列化/反序列化</li></ol><h3 id="GRPC"><a href="#GRPC" class="headerlink" title="GRPC"></a>GRPC</h3><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><h4 id="大体实现逻辑"><a href="#大体实现逻辑" class="headerlink" title="大体实现逻辑"></a>大体实现逻辑</h4><ol><li>PB 协议</li><li>服务端/客户端 Stub 生成器</li><li>gRPC 框架</li></ol>]]></content>
      
      
      <categories>
          
          <category> Microservices </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start Up 2019</title>
      <link href="/2019/01/01/start-up-2019/"/>
      <url>/2019/01/01/start-up-2019/</url>
      
        <content type="html"><![CDATA[<p>2019 年回顾和总结！</p><a id="more"></a><h2 id="2018-年"><a href="#2018-年" class="headerlink" title="2018 年"></a>2018 年</h2><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><h4 id="2016年8-月17日～2018年8月17-日-无二之旅的两年"><a href="#2016年8-月17日～2018年8月17-日-无二之旅的两年" class="headerlink" title="2016年8 月17日～2018年8月17 日: 无二之旅的两年"></a>2016年8 月17日～2018年8月17 日: <a href="https://www.uniqueway.com/" target="_blank" rel="noopener">无二之旅</a>的两年</h4><p>大一有幸被导师选中，做了一年的数据挖掘，期间看了大量的英文资料。<br>大二有幸遇到 LAMP，尝试安装主流的Linux发型版本；使用Vim阅读和编写代码，尝试各种配置和插件；使用 PHP 开发一些玩具程序。<br>大三有幸进入系里的实验室，参与了一些项目，组织过技术培训。<br>大四有幸进入某公司实习，做 Web 开发和嵌入式开发；邂逅了 Ruby 和 Rails。</p><p>研一的课程比较多，期间看了 SICP 和 Coding 等经典书籍。<br>研二有幸和几个同学负责导师的一个课题，使用 C# 开发。<br>研三有幸入职无二之旅，做 Rails 开发。</p><p>在无二之旅，一个全栈工程师应该具备的技能，都有所增益，得到了很好的锻炼。</p><h4 id="2018年8月24-日至今：GrowingIO的三个月"><a href="#2018年8月24-日至今：GrowingIO的三个月" class="headerlink" title="2018年8月24 日至今：GrowingIO的三个月"></a>2018年8月24 日至今：<a href="https://www.growingio.com/" target="_blank" rel="noopener">GrowingIO</a>的三个月</h4><p>Ruby –&gt; Scala， Rails –&gt; Play， 单体架构 –&gt; 微服务架构。转型中，遇到一些问题，心态上的，技术上的，能力上的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>没有拿的出手的项目，也没有拿的出手的文章。过去的就过去了，不再提了！</p><h2 id="2019-年"><a href="#2019-年" class="headerlink" title="2019 年"></a>2019 年</h2><h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><ol><li>写博客（每两周一篇）</li><li>造轮子（与博客同步）</li><li>轻断食（控制饮食）</li><li>轻健身（每天跑步半小时）</li></ol><h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><p>完成Ruby到Scala的转型，能够快速适应下一次技术转型；深入微服务实践，熟悉并发和分布式程序设计，接触大数据和机器学习。</p><p>进一步提升自我！</p>]]></content>
      
      
      <categories>
          
          <category> Planning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API 网关设计与实现</title>
      <link href="/2018/10/05/building-api-gateway/"/>
      <url>/2018/10/05/building-api-gateway/</url>
      
        <content type="html"><![CDATA[<p>基于 OpenResty 实现 API 网关。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>使用微服务构建应用软件系统时，需要确定如何与微服务交互。我们知道，在微服务架构中，每个微服务通过API提供服务，API的形式有多种，REST、gRPC、GraphQL。我们可以直接或间接地访问API使用微服务。</p><p>一般地，我们会使用API网关构建微服务，所有请求都经过API网关处理，然后路由到合适的微服务。API网关有两个基本的功能，服务发现和服务调用，在这里我们只关注服务调用。</p><p>没有银弹，API网关有优点，也有缺点。</p><p>API 网关的主要功能：</p><ul><li>服务发现</li><li>服务调用（请求分片、管理、缓存、静态响应、监控、负载均衡）</li><li>验证与鉴权</li></ul><p>在这里，我们选择基于 OpenResty 设计和实现一个API网关。</p><h2 id="OpenResty"><a href="#OpenResty" class="headerlink" title="OpenResty"></a>OpenResty</h2><blockquote><p>OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。<br>OpenResty® 通过汇聚各种设计精良的 Nginx 模块（主要由 OpenResty 团队自主开发），从而将 Nginx 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。<br>OpenResty® 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。<br>我们使用 OpenResty 搭建 API网关，需要了解Nginx处理请求的流程以及 Lua 编程。</p></blockquote><h2 id="Nginx-工作原理"><a href="#Nginx-工作原理" class="headerlink" title="Nginx 工作原理"></a>Nginx 工作原理</h2><p>Nginx 主要了解Nginx的基本配置、反向代理配置、负载均衡配置以及location指令。</p><h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    include servers/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> puma &#123;</span><br><span class="line">  <span class="attribute">server</span> unix:/var/www/puma.sock fail_timeout=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">client_max_body_size</span> <span class="number">4G</span>;</span><br><span class="line">  <span class="attribute">keepalive_timeout</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">504</span> /<span class="number">500</span>.html;</span><br><span class="line">  <span class="attribute">error_page</span> <span class="number">503</span> @<span class="number">503</span>;</span><br><span class="line"></span><br><span class="line">  server_name;</span><br><span class="line">  <span class="attribute">root</span> /var/www/public;</span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span>/index.html <span class="variable">$uri</span> <span class="variable">@puma</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> <span class="variable">@puma</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://puma;</span><br><span class="line">    <span class="comment"># limit_req zone=one;</span></span><br><span class="line">    <span class="attribute">access_log</span> /var/www/log/nginx.access.log;</span><br><span class="line">    <span class="attribute">error_log</span> /var/www/log/nginx.<span class="literal">error</span>.log;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span><span class="regexp"> ^~</span> /assets/ &#123;</span><br><span class="line">    <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">expires</span> max;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control public;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">    <span class="attribute">root</span> html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> = /<span class="number">404</span>.html &#123;</span><br><span class="line">    <span class="attribute">root</span> html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> @<span class="number">503</span> &#123;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">405</span> = /system/maintenance.html;</span><br><span class="line">    <span class="attribute">if</span> (-f <span class="variable">$document_root</span>/system/maintenance.html) &#123;</span><br><span class="line">      <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /system/maintenance.html <span class="literal">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /<span class="number">503</span>.html <span class="literal">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~ ^(GET|HEAD|PUT|PATCH|POST|DELETE|OPTIONS)$</span> )&#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">405</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">if</span> (-f <span class="variable">$document_root</span>/system/maintenance.html) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">503</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ \.(php|html)$</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">405</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> puma_servers &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.10.13:80</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.10.14:80</span>  down;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.10.15:80</span>  max_fails=<span class="number">3</span>  fail_timeout=<span class="number">20s</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.10.16:8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>  http://puma_servers;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="location-指令"><a href="#location-指令" class="headerlink" title="location 指令"></a>location 指令</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">location @name &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location</span><br></pre></td></tr></table></figure><h2 id="Lua-程序设计"><a href="#Lua-程序设计" class="headerlink" title="Lua 程序设计"></a>Lua 程序设计</h2><h3 id="过程抽象"><a href="#过程抽象" class="headerlink" title="过程抽象"></a>过程抽象</h3><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--&gt; 指数</span></span><br><span class="line"><span class="number">2</span> ^ <span class="number">3</span>  <span class="comment">-- 8.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--&gt; 不等于</span></span><br><span class="line"><span class="number">1</span> ~= <span class="number">0</span> <span class="comment">-- true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--&gt; 字符串连接</span></span><br><span class="line"><span class="string">"Hello"</span> .. <span class="string">"World"</span> <span class="comment">-- HelloWorld</span></span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--&gt; 先定义，后使用</span></span><br><span class="line"><span class="comment">--&gt; 定义函数本质上是在定义变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> <span class="params">()</span></span></span><br><span class="line">  <span class="comment">-- body</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Hello World"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"><span class="comment">--&gt; 允许有多个函数返回值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span><span class="params">(a, b)</span></span></span><br><span class="line">  b, a</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">a, b = swap(a, b)</span><br></pre></td></tr></table></figure><h4 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--&gt; 在语法上，与Ruby相近</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">  <span class="built_in">print</span>(i)</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> i &gt;= <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="FFI"><a href="#FFI" class="headerlink" title="FFI"></a>FFI</h4><h3 id="数据抽象"><a href="#数据抽象" class="headerlink" title="数据抽象"></a>数据抽象</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--&gt; 基础数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--&gt; 在 Lua 中，函数也是一种数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--&gt; 元表</span></span><br></pre></td></tr></table></figure><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p>在 Lua 中，可以使用表和函数实现面向对象。将函数和相关的数据放置于同一个表中就形成了一个对象。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--&gt; 封装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- account.lua</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> _M = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> mt = &#123; <span class="built_in">__index</span> = _M &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M.deposit</span> <span class="params">(self, v)</span></span></span><br><span class="line">    self.balance = self.balance + v</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M.withdraw</span> <span class="params">(self, v)</span></span></span><br><span class="line">    <span class="keyword">if</span> self.balance &gt; v <span class="keyword">then</span></span><br><span class="line">        self.balance = self.balance - v</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">error</span>(<span class="string">"insufficient funds"</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M.new</span> <span class="params">(self, balance)</span></span></span><br><span class="line">    balance = balance <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">setmetatable</span>(&#123;balance = balance&#125;, mt)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _M</span><br><span class="line"></span><br><span class="line"><span class="comment">-- account_test.lua</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> account = <span class="built_in">require</span>(<span class="string">"account"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> a = account:new()</span><br><span class="line">a:deposit(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> b = account:new()</span><br><span class="line">b:deposit(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.balance)  <span class="comment">--&gt; output: 100</span></span><br><span class="line"><span class="built_in">print</span>(b.balance)  <span class="comment">--&gt; output: 50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--&gt; 继承</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---------- base.lua</span></span><br><span class="line"><span class="keyword">local</span> _M = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> mt = &#123; <span class="built_in">__index</span> = _M &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M.upper</span> <span class="params">(s)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">upper</span>(s)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _M</span><br><span class="line"></span><br><span class="line"><span class="comment">---------- more.lua</span></span><br><span class="line"><span class="keyword">local</span> base = <span class="built_in">require</span>(<span class="string">"base"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> _M = &#123;&#125;</span><br><span class="line">_M = <span class="built_in">setmetatable</span>(_M, &#123; <span class="built_in">__index</span> = base &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M.lower</span> <span class="params">(s)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">lower</span>(s)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _M</span><br><span class="line"></span><br><span class="line"><span class="comment">---------- test.lua</span></span><br><span class="line"><span class="keyword">local</span> s_more = <span class="built_in">require</span>(<span class="string">"s_more"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s_more.<span class="built_in">upper</span>(<span class="string">"Hello"</span>))   <span class="comment">-- output: HELLO</span></span><br><span class="line"><span class="built_in">print</span>(s_more.<span class="built_in">lower</span>(<span class="string">"Hello"</span>))   <span class="comment">-- output: hello</span></span><br></pre></td></tr></table></figure><h2 id="Nginx-集成-Lua"><a href="#Nginx-集成-Lua" class="headerlink" title="Nginx 集成 Lua"></a>Nginx 集成 Lua</h2><blockquote><p>第三方ngx_lua 模块用于处理单独配置无法解决的使用场景。<br>OpenResty 是ngx_lua的官方来源，并提供了一组由Nginx、ngx_lua、一个Lua解释器以及一些第三方模块组成的Web平台，其中的第三方模块用于将Nginx转换为应用服务器。<br>Nginx 并不支持同时使用ssi模块与ngx_lua模块处理请求。<br>使用ngx_lua模块时，请记住当读取模块本身时，每个worker进程会加载一次全局变量。因此，最好的做法是声明所有变量为局部变量。<br>在Nginx中使用ngx_lua模块有助于编写更高性能的应用程序。无需将逻辑传递到上游服务器，Lua便可处理该进程。<br><em>你可以在Nginx请求处理的不同阶段调用ngx_lua 模块。</em><br>许多 ngx_lua 配置指令直接引用它们影响到的请求阶段。根据请求处理链要使用Lua的位置，你可以使用响应的指令。<br>加载Lua脚本来处理请求涉及使用lua_package_path指令指定查找脚本的位置，然后使用适当的_by_lua指令来执行该脚本。<br>除了指令外，ngx_lua还可以使用某些功能与Nginx交互。<br>Nginx中的任何变量集都可以在Lua脚本中通过ngx.var.VARIABLE_NAME 来访问。头文件在Lua中通过ngx.header.HEADER来访问。<br>当使用Lua编写脚本时，如果要重用的话，请将Nginx变量放在局部变量中。（有助于防止内存膨胀)</p></blockquote><h2 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a>API 网关</h2><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">location</span> /api &#123;</span><br><span class="line">  <span class="comment"># Initialization Phase</span></span><br><span class="line">  </span><br><span class="line">  init_by_lua*</span><br><span class="line">  </span><br><span class="line">  init_worker_by_lua*</span><br><span class="line">  <span class="comment"># Rewrite/Access Phase</span></span><br><span class="line">  </span><br><span class="line">  ssl_certificate_by_* # if request secure</span><br><span class="line">  </span><br><span class="line">  set_by_lua*</span><br><span class="line">  </span><br><span class="line">  rewrite_by_lua*</span><br><span class="line">  </span><br><span class="line">  access_by_lua*</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Content Phase</span></span><br><span class="line">  </span><br><span class="line">  content_by_lua*/balancer_by_lua*</span><br><span class="line">  </span><br><span class="line">  header_filter_by_lua*</span><br><span class="line">  </span><br><span class="line">  body_filter_by_lua*</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Log Phase</span></span><br><span class="line">  </span><br><span class="line">  log_by_lua*</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在了解了 Nginx 和 OpenResty 的请求处理流程之后，我们可以通过挂载（钩子）实现API网关功能。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过location实现API路由</span></span><br><span class="line"><span class="comment"># 通过 access_by_lua*，挂载身份验证/服务解析的代码</span></span><br><span class="line"><span class="comment"># 通过 header_filter_by_lua*，挂载跨域请求的代码</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.daocloud.io/microservices-2/" target="_blank" rel="noopener">使用 API 网关构建微服务</a></li><li><a href="https://openresty.org/cn/" target="_blank" rel="noopener">OpenResty 中文站</a></li><li><a href="https://moonbingbing.gitbooks.io/openresty-best-practices/content/" target="_blank" rel="noopener">OpenResty 最佳实践</a></li><li><a href="https://openresty.org/download/agentzh-nginx-tutorials-zhcn.html" target="_blank" rel="noopener">agentzh的 Nginx 教程</a></li><li>《Lua程序设计(第2版)》</li><li>《精通Nginx（第2版）》</li></ul>]]></content>
      
      
      <categories>
          
          <category> Microservices </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua </tag>
            
            <tag> Nginx </tag>
            
            <tag> OpenResty </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
