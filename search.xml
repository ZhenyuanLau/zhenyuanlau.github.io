<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>掌握所有的编程语言——开篇</title>
      <link href="/posts/2a5a3393.html"/>
      <url>/posts/2a5a3393.html</url>
      
        <content type="html"><![CDATA[<p>如何掌握所有的程序语言？</p><p>作为一个软件工程师，HTML、CSS、JavaScript、SQL 是必知必会的，此外，我使用 Ruby 和 Scala 做后端开发。</p><p>从 Ruby 转 Scala 的过程中，我最深的感触是掌握一门编程语言不是最难的，难的是，编程语言背后的整个工具链条和开发生态。</p><p>就拿从 Ruby 转 Scala 为例，除了掌握 Scala 的语言特性之外，还要掌握 PlayFramework/Scalatra、Slick/ScalikeJDBC, Undertow 框架或类库。</p><p>此外，软件的调试、测试之道亦要学习。</p><p>无论是 Ruby 还是 Scala，亦或是其他编程语言，几乎要解决相同的领域问题。与其说 Ruby，不如说是 Rails，跟其他语言框架相比，我们可以的关注业务逻辑而非技术细节。</p><p>好的是，我们总可以学习更一般的知识，去驾驭其他知识。通用的知识更为简单，更为抽象，也离题更远，为此，我们需要更多的实例去细化所知所学。</p><p>王垠的《如何掌握所有的程序语言》固然是一篇好文章，但任何实用性的文章，都不能解决文章所关注的问题，唯有行动能够解决问题。</p><p>本文是《掌握所有的编程语言》的开篇。</p><a id="more"></a><blockquote><p>语言是思维的物质外壳。</p></blockquote><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><p>计算机系统是由软件和硬件组成，软件在人更好地控制硬件的过程中演生而来。从系统论、信息论、控制论的角度，更容易清晰地刻画计算机。</p><p>人机关系的两端，一端是人，一端是机器，一般的，机器可以视为人的延伸，不过是放大了人类认知和改造世界的能力，这也是计算机能力的限制根源。</p><p>计算硬件系统不可能脱离一定的物质基础，无论物质基础如何演进。计算机物理实现与逻辑设计的分际是门电路与布尔逻辑运算，更为底层的，是电平的高低与二进制表达。</p><p>二进制代码是机器唯一能够理解的语言。这个“理解”过程，是计算机的数据通路天生与来的能力，能够进行一系列的机器布局和转换。</p><p>掌握了机器语言，就可以实现对机器的控制——程序存储控制。计算机的神秘，都可以通过程序存储控制和机器布局转置得到一定程度上的消解。</p><p>机器到机器语言是 0 到 1，机器语言到高级语言，是 1 到 N。人机语言的终极形态，可能是自然语言或是超自然语言，我们只关注编程语言及其演进。</p><p>《神奇的数字：7±2：我们信息加工能力的局限》揭示了人类信息加工能力的局限性，我更愿意将其作为编程语言演进的逻辑因。</p><p>机器语言 –汇编器–&gt; 汇编语言 –编译器/解释器–&gt; 高级语言 –语言特性–&gt; 高级语言 N。我们在这条道路上一去不复返。</p><p>如何上道？编程语言本身是给不出答案的，编程语言的演化形成编程语言学习道路上的枝叉，只会让我们产生选择障碍。</p><p>跳脱出来！让我们站在更大的图景中去看，软件工程 = 产品 + 开发 + 运维（不一定对，但足够大）。</p><p>我们发现没有编程语言什么事，在实践中，我们更关注领域建模和业务逻辑的设计与实现。</p><p>编程语言只是一种表达工具，如果要关心，我们也应该关注某种语言特性是不是能够更好地支持逻辑表达。</p><h2 id="编程语言特性"><a href="#编程语言特性" class="headerlink" title="编程语言特性"></a>编程语言特性</h2><p>以《程序设计语言原理》为蓝本，掌握通用的编程语言特性。</p><ul><li>变量</li><li>函数、匿名函数、高阶函数</li><li>分支、循环、递归</li><li>类型及类型推导</li><li>函数式编程、命令式编程、分布式编程</li></ul><p>主流的编程语言也不必是最好的编程语言。</p><p>C 和 Java 几乎一直是编程语言排行榜的前三甲，我们不能说 C 和 Java 一定是最好的编程语言，后来的 Golang 和 Scala，就比它们在某方面要好。</p><p><del>与 Python 相比，我认为 Ruby 更好。</del></p><p>一般的，我们在选择编程语言的时候，考虑开发效率和运行效率，创业团队更倾向选择开发效率高的编程语言；考虑业务场景，大数据团队更多地选择 Scala，云服务团队更多地选择 Go。</p><p>每种编程语言，必然有区别于其他编程语言的语言特性，否则就没有存在的价值。一个语言特性被某种编程语言直接支持比间接支持要更为自然，用以编程时也更为惬意，所以，我们倾向选择直接支持某种语言特性的语言。</p><p>学习静态类型及类型推导时，Haskell 就比 Scala 来得更为纯粹；学习 Actor 编程模型时，Erlang/Elixir 就要比 Akka 来得更为直接。</p><p>我们可能借重不同的编程语言去了解和学习不同的语言特性，但我们要使用自己最擅长的编程语言去实现某些语言特性。</p><p>有趣的是，刚才看到了《两年，我学会了所有的编程语言！》，与主题相符，摘录如下：</p><ul><li>面向对象</li><li>函数式编程</li><li>元编程</li><li>并发模型</li><li>虚拟机和垃圾回收</li><li>静态类型、动态类型，类型推导</li><li>抽象语法树</li><li>指针</li><li>异常处理、泛型、同步异步、序列化</li></ul><p>其中，“编程语言是编程语言特性的载体”，这句话一语中的，我们还是要借重不同的编程语言去把握不同的语言特性。</p><h2 id="第一门编程语言"><a href="#第一门编程语言" class="headerlink" title="第一门编程语言"></a>第一门编程语言</h2><p>如果要推荐一门编程语言的话，那就选择 JavaScript 吧！</p><p>JavaScript 是名副其实的网络语言，你几乎可以用它做任何事情——移动应用、桌面应用、Web 应用。</p><p>JavaScript 是值得学习的，只说“JavaScript = C + Lisp” 就值得一学。</p><p>JavaScript 支持命令式编程、面向对象编程、函数式编程、异步编程，支持闭包、匿名函数、回调函数等语言特性，通过原型实现面向对象编程。</p><p>当然，我用 Ruby ！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.yinwang.org/blog-cn/2017/07/06/master-pl" target="_blank" rel="noopener">如何掌握所有的程序语言</a></li><li><a href="https://aimingoo.github.io/1-150.html" target="_blank" rel="noopener">主要的编程范型及其语言特性</a></li><li><a href="https://mp.weixin.qq.com/s/EvrPPZ2oFr93gGWL0cKasA" target="_blank" rel="noopener">两年，我学会了所有的编程语言！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes-Minikube</title>
      <link href="/posts/677d28ce.html"/>
      <url>/posts/677d28ce.html</url>
      
        <content type="html"><![CDATA[<p>在 macOS 上使用 minikube 体验 Kubernetes。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="Kubectl"><a href="#Kubectl" class="headerlink" title="Kubectl"></a>Kubectl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">kubectl version</span><br></pre></td></tr></table></figure><h3 id="Minikube"><a href="#Minikube" class="headerlink" title="Minikube"></a>Minikube</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew cask install minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">minikube start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure><h3 id="Helm"><a href="#Helm" class="headerlink" title="Helm"></a>Helm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install kubernetes-helm</span><br><span class="line"></span><br><span class="line">minikube docker-env</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> $(minikube docker-env)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">helm init --<span class="built_in">history</span>-max 200</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">helm install stable/postgresql</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">minikube start</span><br><span class="line"></span><br><span class="line">kubectl config use-context minikube</span><br><span class="line"></span><br><span class="line">minikube dashboard</span><br><span class="line"></span><br><span class="line">kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10</span><br><span class="line"></span><br><span class="line">kubectl expose deployment hello-minikube --<span class="built_in">type</span>=NodePort --port=8080</span><br><span class="line"></span><br><span class="line">kubectl get pod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">minikube service hello-minikube --url</span><br><span class="line"></span><br><span class="line">kubectl delete services hello-minikube</span><br><span class="line"></span><br><span class="line">kubectl delete deployment hello-minikube</span><br><span class="line"></span><br><span class="line">minikube stop</span><br><span class="line"></span><br><span class="line">minikube delete</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> $(minikube docker-env)</span><br><span class="line"></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://k8s.io/examples/application/deployment-update.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span> <span class="comment"># for versions before 1.9.0 use apps/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">nginx:1.8</span> <span class="comment"># Update the version of nginx from 1.7.9 to 1.8</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">kubectl get deployment</span><br><span class="line"></span><br><span class="line">kubectl get rs</span><br><span class="line"></span><br><span class="line">kubectl get pod [-o wide]</span><br><span class="line"></span><br><span class="line">kubectl delete pod hello-minikube-6fb6cb79cc-whxf7</span><br><span class="line"></span><br><span class="line">kubectl scale --replicas 3 deployment hello-minikube</span><br><span class="line"></span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line">kubectl explain pod.spec.containers</span><br><span class="line"></span><br><span class="line">kubectl logs -f hello-minikube-6fb6cb79cc-n5tch</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8S </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据开发环境搭建</title>
      <link href="/posts/254b4176.html"/>
      <url>/posts/254b4176.html</url>
      
        <content type="html"><![CDATA[<p>在 macOS Mojave 里使用 Homebrew 安装 Zookeeper + Kafka + Hadoop + Hive + Spark + Hbase，搭建大数据开发环境。</p><a id="more"></a><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install zookeeper</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">brew services start zookeeper</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">zkServer status</span><br><span class="line">zkCli</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/local/etc/zookeeper/zoo.cfg</span></span><br><span class="line"><span class="attr">dataDir</span>=/usr/local/var/run/zookeeper/data</span><br></pre></td></tr></table></figure><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install kafka</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">brew services start kafka</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">kafka-topics --list --zookeeper localhost:2181</span><br><span class="line">kafka-topics --create --zookeeper localhost:2181 --topic data --partitions 2 --replication-factor 1</span><br><span class="line">kafka-topics --describe --topic data --zookeeper localhost:2181</span><br><span class="line"></span><br><span class="line">kafka-console-producer --topic vds-api-page --broker-list localhost:9092</span><br><span class="line">kafka-console-consumer --topic data --bootstrap-server localhost:9092</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/local/opt/kafka/libexec/config/server.properties</span></span><br><span class="line">zookeeper.connect=localhost:2181</span><br></pre></td></tr></table></figure><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install hadoop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 /usr/local/opt/hadoop/libexec/etc/hadoop/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">hdfs namenode -format</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">stop-dfs.sh</span><br><span class="line">stop-yarn.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">[http://localhost:8088/cluster](http://localhost:8088/cluster)</span><br><span class="line">[http://localhost:9870/dfshealth.html<span class="comment">#tab-overview](http://localhost:9870/dfshealth.html#tab-overview)</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- core-site.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mapred-site.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hadoop-env.sh</span></span><br><span class="line">export HADOOP_HOME="/usr/local/opt/hadoop/libexec"</span><br><span class="line">export HADOOP_MAPRED_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_COMMON_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_HDFS_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_YARN_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_CONF_DIR="$&#123;HADOOP_HOME&#125;/etc/hadoop"</span><br></pre></td></tr></table></figure><h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install hive</span><br><span class="line"><span class="comment"># brew edit derby 兼容 java8</span></span><br><span class="line">brew install derby</span><br><span class="line"></span><br><span class="line"><span class="comment">## Hive 依赖</span></span><br><span class="line">cp /usr/<span class="built_in">local</span>/opt/derby/libexec/lib/derbyclient.jar /usr/<span class="built_in">local</span>/opt/hive/libexec/lib/</span><br><span class="line">cp /usr/<span class="built_in">local</span>/opt/derby/libexec/lib/derbytools.jar /usr/<span class="built_in">local</span>/opt/hive/libexec/lib/</span><br><span class="line"></span><br><span class="line"><span class="comment">## Hadoop 依赖</span></span><br><span class="line">cp /usr/<span class="built_in">local</span>/opt/derby/libexec/lib/derbyclient.jar /usr/<span class="built_in">local</span>/opt/hadoop/libexec/share/hadoop/common/lib/</span><br><span class="line">cp /usr/<span class="built_in">local</span>/opt/derby/libexec/lib/derbytools.jar /usr/<span class="built_in">local</span>/opt/hadoop/libexec/share/hadoop/common/lib/</span><br><span class="line"></span><br><span class="line"><span class="comment">## Guava 版本</span></span><br><span class="line">cp /usr/<span class="built_in">local</span>/opt/hadoop/libexec/share/hadoop/common/lib/guava-27.0-jre.jar /usr/<span class="built_in">local</span>/opt/hive/libexec/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">DERBY_OPTS=-Dsystem.derby.home=/usr/<span class="built_in">local</span>/opt/derby  /usr/<span class="built_in">local</span>/bin/startNetworkServer</span><br><span class="line"><span class="comment"># vim /usr/local/Cellar/hive/3.1.2/libexec/scripts/metastore/upgrade/derby/hive-schema-3.1.0.derby.sql</span></span><br><span class="line">schematool -dbType derby -initSchema --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">hive -hiveconf hive.root.logger=DEBUG,console <span class="comment"># show tables;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hive-env.sh</span></span><br><span class="line"><span class="attr">HADOOP_HOME</span>=<span class="string">"/usr/local/opt/hadoop"</span></span><br><span class="line">export HIVE_CONF_DIR="/usr/local/opt/hive/libexec/conf"</span><br><span class="line"></span><br><span class="line"><span class="comment"># ~/.zshrc</span></span><br><span class="line">export DERBY_HOME="/usr/local/opt/derby/libexec/"</span><br><span class="line">export CLASSPATH="$CLASSPATH:$DERBY_HOME/lib/derbyclient.jar:$DERBY_HOME/lib/derbytools.jar"</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:derby://localhost:1527/metastore_db;create=true <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.derby.jdbc.ClientDriver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.try.direct.sql.ddl<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install hbase</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 /usr/local/opt/hbase/libexec/conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">start-hbase.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/local/opt/hbase/libexec/conf/hbase-env.sh</span></span><br><span class="line"><span class="attr">HBASE_MANAGES_ZK</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://127.0.0.1:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/var/run/zookeeper/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install spark</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">spark-shell</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.tutorialspoint.com/hive/hive_installation.htm" target="_blank" rel="noopener">Hive - Installation</a></li><li><a href="https://www.tutorialspoint.com/hbase/hbase_installation.htm" target="_blank" rel="noopener">HBase - Installation</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/HiveDerbyServerMode" target="_blank" rel="noopener">HiveDerbyServerMode</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何阅读一本书</title>
      <link href="/posts/e381f91f.html"/>
      <url>/posts/e381f91f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>所谓艺术或技巧，只属于那个能养成习惯，而且能依照规则来运作的人。</p></blockquote><p>在阅读时，你需要考虑以下因素：想不想要读？值不值得读？时间很有限？</p><p>如何让一本书真正属于你自己？讲出来或者写下来。</p><p>提出问题，找出答案；遵循规则，学习技巧，懂得运用；不断练习，养成习惯，做一个自我要求的阅读者。</p><a id="more"></a><h2 id="主动阅读"><a href="#主动阅读" class="headerlink" title="主动阅读"></a>主动阅读</h2><p>所谓的主动阅读，也就是能提出问题来。</p><p>主动阅读的核心是<strong>你在阅读时要提出问题来——在阅读的过程中，你必须尝试去回答的问题</strong>。</p><p>关于一本书，你一定要提出<strong>四个主要的问题</strong>：</p><ul><li>整体来说，这本书到底在谈些什么</li><li>作者细说了什么，怎么说的？</li><li>这本书说得有道理吗？是全部有道理，还是部分有道理？</li><li>这本书跟你有什么关系？</li></ul><p>只要是超越了基础阅读的阅读层次，<strong>阅读的艺术，就是要以适当的顺序提出适当的问题。</strong></p><p>任何一种超越基础阅读的阅读层次，核心就在<strong>你要努力提出问题（然后尽你可能地找出答案）</strong>。</p><p><strong>仅仅提出问题还不够，你还要试着去回答问题</strong>。</p><h2 id="阅读目标"><a href="#阅读目标" class="headerlink" title="阅读目标"></a>阅读目标</h2><p>或了解信息；或增进理解。</p><p>为了讯息而阅读，就跟娱乐阅读一样，没法帮助你心智的成长。</p><p>心智就跟肌肉一样，如果不常运用就会萎缩。</p><p>如果你的阅读目标是获得利益——不论是心灵或精神上的成长——你就得保持清醒。</p><h2 id="阅读层次"><a href="#阅读层次" class="headerlink" title="阅读层次"></a>阅读层次</h2><p>阅读的层次是渐进累积的，较高层次的阅读中包括了较低层次的阅读。</p><ul><li>基础阅读</li><li>检视阅读</li><li>分析阅读</li><li>主题阅读</li></ul><p>基础阅读包含在检视阅读中，检视阅读包含在分析阅读中，分析阅读包含在主题阅读中。</p><p>任何一种超越基础阅读的阅读层次，核心就在于要努力提出问题（然后尽可能找出答案）。</p><h2 id="阅读速度"><a href="#阅读速度" class="headerlink" title="阅读速度"></a>阅读速度</h2><blockquote><p>在阅读一本书时，慢不该慢到不值得，快不该快到有损于满足和理解。</p></blockquote><p>不只是要能读得快，还要能用不同的速度来阅读——要知道什么时候用什么样的速度是恰当的。</p><p>矫正逗留与倒退的阅读习惯，使用手指。</p><p>理解力，是比回答书本内容一些简单问题还要多一点的东西。</p><h2 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h2><p>阅读一本书应该像是你与作者之间的对话。在书上做笔记，其实就是在表达你跟作者之间的相异或相同的观点。</p><ul><li>结构笔记</li><li>概念笔记</li><li>辩证笔记</li></ul><p>不同的阅读层次，会有不同的阅读问题，应该做一下笔记，把问题的答案写下来。</p><h2 id="检视阅读"><a href="#检视阅读" class="headerlink" title="检视阅读"></a>检视阅读</h2><p>检视阅读是一种在有限的时间中，充分了解一本书的艺术。</p><p>检视阅读的一个隐喻：打谷，从糟糠中过滤出真正营养的谷核。</p><p>检视阅读的另一个隐喻：像一个侦探，在寻找一本书的主题或思想的线索。</p><p>检视阅读可以帮你了解一本书的主题、种类、架构，还能帮你决定是否进行分析阅读。</p><p><strong>你脑中的目标是要发现这本书值不值得多花时间仔细阅读。</strong></p><h3 id="粗读"><a href="#粗读" class="headerlink" title="粗读"></a>粗读</h3><p>读读书名、副标题、目录，然后看看序言、摘要及索引，看看书衣上的文案。</p><ol><li>先看书名页，然后如果有序就先看序（了解主题）；</li><li>研究目录页（理解架构）；</li><li>检阅一下书中的索引；</li><li>读一下出版者的介绍；</li><li>挑几个看来跟主题相关的篇章来看；</li><li>东翻翻，西翻翻。</li></ol><p>确定自己在读的是什么主题，说明这是什么样的书，并拟出大纲架构。</p><p><strong>阅读书名很重要，但还不够。除非你能在心中有一个分类的标准，否则世上再清楚的书名，在详尽的目录、前言，对你也没有什么帮助。</strong></p><h3 id="浅读"><a href="#浅读" class="headerlink" title="浅读"></a>浅读</h3><p>头一次面对一本难度的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或思索。</p><p>能够与作者达成共识，说明他的主旨，跟随他的论述，诠释整本书的内容。</p><h3 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h3><ol><li>这是什么样的一本书？</li><li>整本书在谈的是什么？</li><li>作者是借着怎样的整体架构，来发展他的观点或陈述他对这个主题的理解？</li></ol><h2 id="分析阅读"><a href="#分析阅读" class="headerlink" title="分析阅读"></a>分析阅读</h2><p>没有经过分析阅读，你就没法理解一本书。</p><p>分析阅读的技巧只适用于单一的作品，主要的目标是要了解这本书。</p><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><p>分析阅读的第一阶段：找出一本书在谈些什么的规则</p><ol><li>依照书本的种类与主题做分类；</li><li>用最简短的句子说出整本书在谈些什么；</li><li>按照顺序与关系，列出全书的重要部分。将全书的纲要拟出来之后，再将各个部分的纲要也要一一列出；</li><li>找出作者在问的问题，或作者想要解决的问题。</li></ol><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><p>分析阅读的第二阶段：诠释一本书的内容规则</p><ol><li>诠释作者的关键字，与他达成共识；</li><li>由最重要的句子中抓住作者的重要主旨；</li><li>知道作者的论述是什么，从内容中找出相关的句子，再重新架构出来；</li><li>确定作者已经解决了哪些问题，还有哪些是没解决的，再判断哪些是作者知道他没解决的问题。</li></ol><h3 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h3><p>分析阅读的第三阶段：像是沟通知识一样地评论一本书的规则</p><h4 id="智慧礼节的一般规则"><a href="#智慧礼节的一般规则" class="headerlink" title="智慧礼节的一般规则"></a>智慧礼节的一般规则</h4><ol><li>除非你已经完成大纲架构，也能诠释整本书了，否则不要轻易批评；</li><li>不要争强好胜，非辩到底不可；</li><li>在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同。</li></ol><h4 id="批评观点的特别标准"><a href="#批评观点的特别标准" class="headerlink" title="批评观点的特别标准"></a>批评观点的特别标准</h4><ol><li>证明作者的知识不足；</li><li>证明作者的知识错误；</li><li>证明作者不合逻辑；</li><li>证明作者的分析与理由是不完整的。</li></ol><h2 id="主题阅读"><a href="#主题阅读" class="headerlink" title="主题阅读"></a>主题阅读</h2><p>就同一个主题，阅读两种以上的书。</p><p>在主题阅读中，你及你关心的主题才是基本的重点，而不是你阅读的书。</p><p>主题阅读是最主动的一种阅读方法。你在分析阅读一本书时，你就像把书当作主人，供他使唤；在做主题阅读时，却一定要做书的主人。</p><h3 id="捷径"><a href="#捷径" class="headerlink" title="捷径"></a>捷径</h3><p>检视书单上所有的书。</p><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ol><li>对一个特定的问题来说，所牵涉的绝对不是一本书而已；</li><li>要知道就总的来说，应该读的是哪些书?</li></ol><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>主题阅读的准备阶段：观察研究范围</p><ol><li>针对你要研究的主题，设计一份试验性的书目。你可以参考图书馆目录、专家的建议与书中的书目索引；</li><li>浏览这份书目上所有的书，确定哪些与你的主题相关，并就你的主题建立起清楚的概念。</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>阅读所有第一阶段收集到的书籍</p><ol><li>浏览所有在第一阶段被认定与你主题相关的书，找出最相关的章节；</li><li>根据主题创造出一套中立的词汇，带引作者与你达成共识；</li><li>建立一个中立的主旨，列出一连串的问题；</li><li>界定主要及次要的议题，然后将作者针对各个问题的不同意见整理陈列在各个议题旁；</li><li>分析这些讨论。</li></ol><h2 id="阅读建议"><a href="#阅读建议" class="headerlink" title="阅读建议"></a>阅读建议</h2><p>越通用的规则，就越少，也越容易理解，也离题越远。</p><p>在运用规则时，一定要有弹性，并能随时调整。</p><h3 id="实用性的书"><a href="#实用性的书" class="headerlink" title="实用性的书"></a>实用性的书</h3><blockquote><p>任何实用性的书都不能解决该书所关心的实际问题。</p></blockquote><p>实际的问题只能靠行动来解决。</p><p>任何人想要使用这样的书，一定要能加上一点自己的想法，才能运用在实际的状况中。</p><p>无法让一本实用的书被实用地阅读，就是失败的阅读。</p><p>当你在阅读任何一种实用性书时，一定要问你自己的两个主要的问题：</p><ol><li>作者的目的是什么？</li><li>作者建议用什么方法达到这个目的？</li></ol><p>赞同一本实用性的书，需要你采取行动。</p><h3 id="科学与数学"><a href="#科学与数学" class="headerlink" title="科学与数学"></a>科学与数学</h3><p>阅读流行的科普书。</p><p>记住，你的责任不是成为这个主题的专家，而是要去了解相关的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Manjaro Linux</title>
      <link href="/posts/eaf.html"/>
      <url>/posts/eaf.html</url>
      
        <content type="html"><![CDATA[<p>一直使用公司的 MacBook Pro，自己的 Ideapad 闲置着，安装一个 Linux 版本试试，就使用 Manjaro Linux 吧。</p><p>其实，Manjaro Linux 一直躺在我的 Ideapad 中，只是需要简单的配置，满足写博客的基本需求。</p><p>安装中文字体，安装中文输入法，安装一个文本编辑器，大体可以工作了。</p><a id="more"></a><h2 id="添加国内软件源"><a href="#添加国内软件源" class="headerlink" title="添加国内软件源"></a>添加国内软件源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><h2 id="安装中文字体"><a href="#安装中文字体" class="headerlink" title="安装中文字体"></a>安装中文字体</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S adobe-source-han-serif-cn-fonts wqy-zenhei</span><br></pre></td></tr></table></figure><h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx-googlepinyin</span><br><span class="line">sudo pacman -S fcitx-im</span><br><span class="line">sudo pacman -S fcitx-configtool</span><br></pre></td></tr></table></figure><p>添加 .xprofile 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=”@im=fcitx”</span><br></pre></td></tr></table></figure><p>注销登录即可。</p><h2 id="安装文本编辑器"><a href="#安装文本编辑器" class="headerlink" title="安装文本编辑器"></a>安装文本编辑器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S code</span><br></pre></td></tr></table></figure><h2 id="搭建-Hexo-环境"><a href="#搭建-Hexo-环境" class="headerlink" title="搭建 Hexo 环境"></a>搭建 Hexo 环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br><span class="line"></span><br><span class="line">nvm install stable</span><br><span class="line"></span><br><span class="line">sudo pacman -S yarn</span><br><span class="line"></span><br><span class="line">yarn global add hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># add yarn global bin to $PATH</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>习惯了 macOS 上的快捷键，可能会不太习惯，效率会有些低，但是已经很不错了。</p><p>可以安静地写文章了！</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sinatra 原理剖析</title>
      <link href="/posts/1e4d.html"/>
      <url>/posts/1e4d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Sinatra 是一门基于 Ruby 的领域专属语言，致力于轻松、快速地创建网络应用。</p></blockquote><p>剖析 Sinatra 有助于进一步了解 Rack 的工作原理，有助于了解一个 Web 框架的应有的特性及其实现。</p><p>Sinatra 的实现涉及到正则表达式、Ruby 元编程特性，还有 HTTP 相关知识，在剖析的过程中，都可以进行回顾和总结。</p><a id="more"></a><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>摘自 <a href="http://sinatrarb.com/" target="_blank" rel="noopener">Sinatra</a> 官网。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.rb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></span><br><span class="line">get <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="string">'Hello, 世界!'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby app.rb</span><br></pre></td></tr></table></figure><p>在浏览器中访问 <a href="http://localhost:4567/" target="_blank" rel="noopener">http://localhost:4567/</a>。</p><h2 id="程序是怎样跑起来的"><a href="#程序是怎样跑起来的" class="headerlink" title="程序是怎样跑起来的"></a>程序是怎样跑起来的</h2><p>Sinatra 是怎样启动 Thin 服务器的？<br>Sinatra 是如何响应请求的？</p><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p><a href="https://www.rubyguides.com/2017/08/how-does-sinatra-work/" target="_blank" rel="noopener">Sinatra 工作原理</a> &amp; <a href="https://github.com/zhengjia/sinatra-explained" target="_blank" rel="noopener">Sinatra Explained</a> 都解释了 Sinatra 的启动过程。</p><p>让我们一起跟踪一下 Sinatra 的启动过程：</p><p>打开 pry ！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></span><br><span class="line"><span class="comment"># =&gt; true</span></span><br><span class="line">get <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="string">'Hello, 世界!'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># =&gt; [#&lt;Mustermann::Sinatra:"/"&gt;, [], #&lt;Proc:0x00007fc84f3925a0@/sinatra/base.rb:1635&gt;]</span></span><br><span class="line"><span class="comment"># 延迟执行</span></span><br></pre></td></tr></table></figure><p>在 pry 中运行例子程序，是不会启动 Thin 的。那 Thin 是如何被启动的？其实不需要太多尝试，Thin 的启动应该发生在 app.rb 运行之后，这怎么可能做到？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lib/sinatra/main.rb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Sinatra</span></span></span><br><span class="line">  <span class="comment"># ...snip...</span></span><br><span class="line">  at_exit &#123; Application.run! <span class="keyword">if</span> $!.<span class="literal">nil</span>? &amp;&amp; Application.run? &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在 app.rb 运行结束之后，执行</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application.run! <span class="keyword">if</span> $!.<span class="literal">nil</span>? &amp;&amp; Application.run?</span><br></pre></td></tr></table></figure><blockquote><p>$!<br>The exception information message set by ‘raise’.<br>$0<br>Contains the name of the script being executed. May be assignable.</p></blockquote><p>进一步跟踪一下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lib/sinatra/main.rb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Sinatra</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Application</span> &lt; Base</span></span><br><span class="line">    set <span class="symbol">:run</span>, Proc.new &#123; File.expand_path($0) == File.expand_path(app_file) &#125;</span><br><span class="line">    <span class="comment"># ...snip...</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  at_exit &#123; Application.run! <span class="keyword">if</span> $!.<span class="literal">nil</span>? &amp;&amp; Application.run? &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Sinatra::Application.run?</span><br><span class="line"><span class="comment"># =&gt; true</span></span><br><span class="line"></span><br><span class="line">$ Sinatra::Application.run!</span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">  begin</span></span><br><span class="line"><span class="comment">    start_server(handler, server_settings, handler_name, &amp;block)</span></span><br><span class="line"><span class="comment">  rescue</span></span><br><span class="line"><span class="comment">    ...snip...</span></span><br><span class="line"><span class="comment">  end</span></span><br><span class="line"><span class="comment">=end</span></span><br><span class="line"></span><br><span class="line">$ Sinatra::Application.start_server</span><br><span class="line"><span class="comment"># -&gt; handler.run</span></span><br><span class="line"></span><br><span class="line">Sinatra::Application.send(<span class="symbol">:detect_rack_handler</span>)</span><br><span class="line"><span class="comment"># =&gt; Rack::Handler::Thin</span></span><br></pre></td></tr></table></figure><p>梳理一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Application.run! -&gt; Application.start_server -&gt; handler.start</span><br><span class="line"></span><br><span class="line">监听 4567 端口 !</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">extend Sinatra::Delegator</span><br><span class="line"><span class="comment"># 在顶层上下文中可以访问 get 方法</span></span><br><span class="line"></span><br><span class="line">$ get</span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line">define_method(method_name) <span class="keyword">do</span> <span class="params">|*args, &amp;block|</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>(*args, &amp;block) <span class="keyword">if</span> respond_to? method_name</span><br><span class="line">  Delegator.target.send(method_name, *args, &amp;block)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">呃？！</span><br></pre></td></tr></table></figure><p>经过整理，Sinatra 请求处理流程如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Sinatra</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(env)</span></span></span><br><span class="line">      dup.call!(env)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call!</span><span class="params">(env)</span></span></span><br><span class="line">      invoke &#123; dispatch! &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch!</span></span></span><br><span class="line">      route!</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">route!</span></span></span><br><span class="line">      route_eval &#123; [<span class="number">200</span>, &#123;&#125;, <span class="string">'Hello, Sinatra!'</span>] &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">route_eval</span></span></span><br><span class="line">      throw <span class="symbol">:halt</span>, <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">invoke</span></span></span><br><span class="line">      res = catch(<span class="symbol">:halt</span>) &#123; <span class="keyword">yield</span> &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">settings</span></span></span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(path, opts = &#123;&#125;, &amp;block)</span></span></span><br><span class="line">        route(<span class="string">'GET'</span>, path, opts, &amp;block)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(verb, path, options = &#123;&#125;, &amp;block)</span></span></span><br><span class="line">        @routes         = &#123;&#125;</span><br><span class="line">        (@routes[<span class="string">'GET'</span>] <span class="params">||</span>= []) &lt;&lt; [<span class="literal">nil</span>, [], block]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(env)</span></span></span><br><span class="line">        new.call(env)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Application</span> &lt; Base</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="代理的实现"><a href="#代理的实现" class="headerlink" title="代理的实现"></a>代理的实现</h3><p>如果我们想在顶层上下文中，引用 Sinatra::Base.get 方法，我们可以怎么做？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">get <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="string">"Hello, 世界"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; NoMethodError: undefined method `get' for main:Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># include would include the module in Object</span></span><br><span class="line"><span class="comment"># extend only extends the `main` object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sinatra/base'</span></span><br><span class="line"></span><br><span class="line">extend Sinatra::Delegator</span><br></pre></td></tr></table></figure><p>在 Sinatra::Delegator 中定义私有方法，在顶层上下文中调用 extend Sinatra::Delegator，Sinatra::Delegator 的私有方法将成为 main 对象的私有方法，确切的说，是 main 的单件类的私有实例方法。</p><p>Sinatra::Delegator 实现如下，定义了一个类实例变量 target，作为代理目标，定义了一个类方法 delegate，使用 deleate 方法定义了一些列私有实例方法，代理到 target。代码实现如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Delegator</span> <span class="comment">#:nodoc:</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">delegate</span><span class="params">(*methods)</span></span></span><br><span class="line">    methods.each <span class="keyword">do</span> <span class="params">|method_name|</span></span><br><span class="line">      define_method(method_name) <span class="keyword">do</span> <span class="params">|*args, &amp;block|</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>(*args, &amp;block) <span class="keyword">if</span> respond_to? method_name</span><br><span class="line">        Delegator.target.send(method_name, *args, &amp;block)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      private method_name</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  delegate <span class="symbol">:get</span>, <span class="symbol">:patch</span>, <span class="symbol">:put</span>, <span class="symbol">:post</span>, <span class="symbol">:delete</span>, <span class="symbol">:head</span>, <span class="symbol">:options</span>, <span class="symbol">:link</span>, <span class="symbol">:unlink</span>,</span><br><span class="line">            <span class="symbol">:template</span>, <span class="symbol">:layout</span>, <span class="symbol">:before</span>, <span class="symbol">:after</span>, <span class="symbol">:error</span>, <span class="symbol">:not_found</span>, <span class="symbol">:configure</span>,</span><br><span class="line">            <span class="symbol">:set</span>, <span class="symbol">:mime_type</span>, <span class="symbol">:enable</span>, <span class="symbol">:disable</span>, <span class="symbol">:use</span>, <span class="symbol">:development?</span>, <span class="symbol">:test?</span>,</span><br><span class="line">            <span class="symbol">:production?</span>, <span class="symbol">:helpers</span>, <span class="symbol">:settings</span>, <span class="symbol">:register</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line">    <span class="keyword">attr_accessor</span> <span class="symbol">:target</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">self</span>.target = Application</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><blockquote><p>阅读代码时，应该尽可能地利用任何能够得到地文档。</p></blockquote><p><a href="http://sinatrarb.com/intro-zh.html" target="_blank" rel="noopener">Sinatra README</a><br><a href="https://www.rubyguides.com/2017/08/how-does-sinatra-work/" target="_blank" rel="noopener">Sinatra 工作原理</a><br><a href="https://github.com/zhengjia/sinatra-explained" target="_blank" rel="noopener">Sinatra Explained</a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>Sinatra 几乎包含了一个 Web 框架的所有特性。</p><ul><li>路由</li><li>浏览器重定向</li><li>静态文件</li><li>视图 / 模板</li><li>过滤器</li><li>辅助方法</li><li>错误处理</li><li>会话</li><li>日志</li><li>缓存控制</li><li>配置 &amp; 环境</li></ul><p>接下来，将对部分特性进行剖析。</p><h3 id="Rack-中间件"><a href="#Rack-中间件" class="headerlink" title="Rack 中间件"></a>Rack 中间件</h3><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>从责任/角色/协作视角看 Sinatra，我们可以获得哪些架构上的认知。</p><p>我们将 Sinatra 特性分为框架特性和非框架特性，如果将 Sinatra 看成是一个黑箱，那么框架特性在黑箱内部，非框架特性在黑箱边界。作为 Rack 应用，Sinatra 需要响应 call 方法，同时负责启动应用服务器。</p><p>Sinatra 将应用启动的责任分配给 Sinatra::Application，但是代理给 Sinatra::Base。其实，Sinatra::Application 的责任都代理给了 Sinatra::Base。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>Sinatra 使用标准的 Gem 项目结构，主要实现位于文件 main.rb 和 base.rb 中 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── sinatra</span><br><span class="line">│   ├── base.rb</span><br><span class="line">│   ├── images</span><br><span class="line">│   │   ├── 404.png</span><br><span class="line">│   │   └── 500.png</span><br><span class="line">│   ├── indifferent_hash.rb</span><br><span class="line">│   ├── main.rb</span><br><span class="line">│   ├── show_exceptions.rb</span><br><span class="line">│   └── version.rb</span><br><span class="line">└── sinatra.rb</span><br><span class="line"></span><br><span class="line">2 directories, 8 files</span><br></pre></td></tr></table></figure><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">brew install cloc</span><br><span class="line"></span><br><span class="line">cloc .</span><br><span class="line"></span><br><span class="line"><span class="comment"># sinatra (2.0.5)</span></span><br><span class="line"></span><br><span class="line">32 text files.</span><br><span class="line">32 unique files.</span><br><span class="line">6 files ignored.</span><br><span class="line"></span><br><span class="line">github.com/AlDanial/cloc v 1.82  T=0.16 s (167.6 files/s, 229647.0 lines/s)</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Markdown                        17           7457              0          25255</span><br><span class="line">Ruby                             9            430            345           2131</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">SUM:                            26           7887            345          27386</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sinatra::Base.set</span></span><br></pre></td></tr></table></figure><h4 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h4><p>在 Ruby 中，方法查找和方法调用是两个独立的过程，obj.methods 中的方法都是可以显式指定接收者的，obj.private_methods 中的方法只能通过隐式的接收者调用。</p><p>在编程过程中，其实不需要关注私有方法存在对象的类中还是单件类中。如果清楚其中的实现，当然更好！具体参看 *methods 的 API 文档。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line">private</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">a</span></span></span><br><span class="line">    <span class="string">'private a'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">a = A.new</span><br><span class="line">a.methods.<span class="keyword">include</span>? <span class="symbol">:a</span> <span class="comment"># =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">M</span></span></span><br><span class="line">private</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">m</span></span></span><br><span class="line">    <span class="string">'M#m'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">extend M</span><br><span class="line"><span class="keyword">self</span>.methods.<span class="keyword">include</span>? <span class="symbol">:m</span> <span class="comment"># =&gt; false</span></span><br><span class="line"><span class="keyword">self</span>.private_methods.<span class="keyword">include</span>? <span class="symbol">:m</span></span><br><span class="line">m <span class="comment">#=&gt; 'M#m'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line">private</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sm</span></span></span><br><span class="line">    <span class="string">'self#sm'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">self</span>.singleton_methods.<span class="keyword">include</span>? <span class="symbol">:sm</span> <span class="comment"># =&gt; false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Microscope </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 本地安装 Consul</title>
      <link href="/posts/f78c.html"/>
      <url>/posts/f78c.html</url>
      
        <content type="html"><![CDATA[<p>在 macOS 中，使用 Homebrew 安装 Consul，使用 HomebrewServices 启动 Consul，重启后数据丢失。记录解决方法如下。</p><a id="more"></a><h2 id="安装-Consul"><a href="#安装-Consul" class="headerlink" title="安装 Consul"></a>安装 Consul</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install consul</span><br></pre></td></tr></table></figure><h2 id="启动-Consul"><a href="#启动-Consul" class="headerlink" title="启动 Consul"></a>启动 Consul</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start consul</span><br></pre></td></tr></table></figure><h2 id="重启-Consul"><a href="#重启-Consul" class="headerlink" title="重启 Consul"></a>重启 Consul</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services restart consul</span><br></pre></td></tr></table></figure><p>重启 Consul 后，数据丢失！</p><p>Why? 修改 Consul 启动模式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># code /Users/user/Library/LaunchAgents/homebrew.mxcl.consul.plist 不起作用</span><br><span class="line"># code /usr/local/Cellar/consul/1.4.0/homebrew.mxcl.consul.plist</span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span>&gt;</span>SuccessfulExit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>homebrew.mxcl.consul<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/opt/consul/bin/consul<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>agent<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>-server<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>-data-dir<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/opt/consul/data<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>-bind<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>-bootstrap-expect<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>-ui<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>WorkingDirectory<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/var<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardErrorPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/var/log/consul.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardOutPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/var/log/consul.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Property-List-属性列表文件"><a href="#Property-List-属性列表文件" class="headerlink" title="Property List(属性列表文件)"></a>Property List(属性列表文件)</h2><blockquote><p>属性列表（Property List）文件是一种用来存储序列化后的对象的文件。<br>Plist文件通常用于储存用户设置，也可以用于存储捆绑的信息。<br>从Mac OS X 10.5开始，Apple也提供了用于编辑，创建和写入plist文件的接口。</p></blockquote><h2 id="Homebrew-Services"><a href="#Homebrew-Services" class="headerlink" title="Homebrew Services"></a>Homebrew Services</h2><p><a href="https://github.com/Homebrew/homebrew-services/blob/master/cmd/brew-services.rb" target="_blank" rel="noopener">brew-services</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重拾 Ruby</title>
      <link href="/posts/6830.html"/>
      <url>/posts/6830.html</url>
      
        <content type="html"><![CDATA[<p>从 2018 年底至今，写了快一年的 Scala 应用程序，重拾一下 Ruby。近乎涉及 Ruby 开发的所有方面，当然不可能全面。</p><a id="more"></a><p>写一份 Ruby 攻略，而不是写一份参考手册。</p><p>Ruby 进程/线程/网络编程，参看 <a href="https://draveness.me/rack" target="_blank" rel="noopener">谈谈 Rack 的协议与实现</a>。</p><p>通过 Ruby 的应用服务器设计与实现，理解 Ruby 进程/线程/网络编程。</p><h2 id="Ruby-编程"><a href="#Ruby-编程" class="headerlink" title="Ruby 编程"></a>Ruby 编程</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.times <span class="keyword">do</span></span><br><span class="line">  puts <span class="string">"Ruby is a programmer's best friend"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>使用 RVM 管理 Ruby 的版本；使用 Pry 替代 irb，Pry 是阅读 Ruby 项目源码的一件利器。</p><h4 id="RVM"><a href="#RVM" class="headerlink" title="RVM"></a><a href="https://rvm.io/" target="_blank" rel="noopener">RVM</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rvm list known</span><br><span class="line"></span><br><span class="line">rvm install ruby-head</span><br><span class="line"></span><br><span class="line">rvm use ruby-head</span><br><span class="line"></span><br><span class="line">rvm gemset list</span><br><span class="line"></span><br><span class="line">rvm gemset create dev</span><br><span class="line"></span><br><span class="line">rvm use --ruby-version ruby-head@dev</span><br></pre></td></tr></table></figure><h4 id="Pry"><a href="#Pry" class="headerlink" title="Pry"></a><a href="http://pryrepl.org/" target="_blank" rel="noopener">Pry</a></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'rack'</span></span><br><span class="line"></span><br><span class="line">$ Rack::Server.start</span><br><span class="line"></span><br><span class="line">$ Rack::Server<span class="comment">#initialize</span></span><br></pre></td></tr></table></figure><h3 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h3><p>实验驱动开发：读取-求值—打印-循环。快速实验 API 用法，一步步写出代码。</p><h3 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h3><h4 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h4><p>见 《Ruby 元编程》。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(text)</span></span></span><br><span class="line">    @text = text</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">welcome</span></span></span><br><span class="line">    @text</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">g = Greeting.new(<span class="string">'Hello, Ruby'</span>)</span><br><span class="line">g.instance_variables</span><br><span class="line">g.<span class="keyword">class</span></span><br><span class="line">g.<span class="keyword">class</span>.instance_methods(<span class="literal">false</span>)</span><br><span class="line">g.<span class="keyword">class</span>.superclass</span><br><span class="line">g.<span class="keyword">class</span>.ancestors</span><br><span class="line">g.singleton_class</span><br></pre></td></tr></table></figure><h4 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h4><p>见《函数式编程思想》。函数式语言特性，包括不变性、引用透明性、模式匹配、列表推导式、高阶函数、组合函数、函子、可应用函子、单子等。Ruby 支持部分函数式语言特性。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.map &#123; <span class="params">|item|</span> item * <span class="number">3</span> &#125;</span><br><span class="line">a.filter &#123; <span class="params">|item|</span> item.odd? &#125;</span><br><span class="line">a.reduce(<span class="number">0</span>) &#123; <span class="params">|a, b|</span> a + b &#125;</span><br></pre></td></tr></table></figure><h4 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h4><p>见《理解 Unix 进程》和《理解 Ruby 线程》。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thr = Thread.new &#123; puts <span class="string">"Whats the big deal"</span> &#125;</span><br><span class="line">thr.join</span><br></pre></td></tr></table></figure><h4 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h4><p><a href="https://www.codeotaku.com/journal/2018-06/asynchronous-ruby/index" target="_blank" rel="noopener">Asynchronous Ruby</a></p><h4 id="分布式编程"><a href="#分布式编程" class="headerlink" title="分布式编程"></a>分布式编程</h4><p>见 《分布式 Ruby 编程》。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Ruby 是一门通用语言，支持多种编程范式。Ruby 优雅而灵活，是程序员的朋友。</p><h2 id="Ruby-元编程"><a href="#Ruby-元编程" class="headerlink" title="Ruby 元编程"></a>Ruby 元编程</h2><p>一图胜千言。</p><p><img src="https://github.com/zhenyuanlau/cdn/blob/master/images/ruby-object-system.jpg?raw=true" alt="Ruby Object System"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">K</span>;</span> <span class="keyword">end</span></span><br><span class="line">o = K.new</span><br><span class="line"><span class="class"><span class="keyword">class</span> &lt;&lt; o</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">m</span></span></span><br><span class="line">    puts <span class="string">'#o #m'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">o.m</span><br></pre></td></tr></table></figure><h3 id="include-和-extend"><a href="#include-和-extend" class="headerlink" title="include 和 extend"></a>include 和 extend</h3><p>简单地说，Ruby 使用继承实现 include 和 extend。在 Ruby 中，include 和 extend 都是方法，不是关键字，虽然这样强调毫无应用价值。</p><h2 id="Ruby-原理剖析"><a href="#Ruby-原理剖析" class="headerlink" title="Ruby 原理剖析"></a>Ruby 原理剖析</h2><p>见 《Flex &amp;&amp; Bison》 和 《深入理解程序设计》。</p><h2 id="Ruby-进程"><a href="#Ruby-进程" class="headerlink" title="Ruby 进程"></a>Ruby 进程</h2><p>阅读 ruby/process.c。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">rb_define_global_function(<span class="keyword">const</span> <span class="keyword">char</span> *name, VALUE (*func)(ANYARGS), <span class="keyword">int</span> argc)</span><br><span class="line">&#123;</span><br><span class="line">    rb_define_module_function(rb_mKernel, name, func, argc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">rb_define_module_function(VALUE <span class="keyword">module</span>, <span class="keyword">const</span> <span class="keyword">char</span> *name, VALUE (*func)(ANYARGS), <span class="keyword">int</span> argc)</span><br><span class="line">&#123;</span><br><span class="line">    rb_define_private_method(<span class="keyword">module</span>, name, func, argc);</span><br><span class="line">    rb_define_singleton_method(<span class="keyword">module</span>, name, func, argc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ruby 对进程相关的系统调用进行了封装，但只使用了模块。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 摘自 《理解 Unix 进程》</span></span><br><span class="line"></span><br><span class="line">Process.pid  <span class="comment"># 进程皆有标识</span></span><br><span class="line"></span><br><span class="line">Process.ppid <span class="comment"># 进程皆有父</span></span><br><span class="line"></span><br><span class="line">STDIN.fileno</span><br><span class="line"></span><br><span class="line">STDOUT.fileno</span><br><span class="line"></span><br><span class="line">STDERR.fileno <span class="comment"># 进程皆有描述符</span></span><br><span class="line"></span><br><span class="line">Process.getrlimit(<span class="symbol">:NOFILE</span>) <span class="comment"># 进程皆有资源限制</span></span><br><span class="line"></span><br><span class="line">ENV <span class="comment"># 进程皆有环境</span></span><br><span class="line"></span><br><span class="line">ARGV <span class="comment"># 进程皆有参数</span></span><br><span class="line"></span><br><span class="line">$PROGRAM_NAME <span class="comment"># 进程皆有名</span></span><br><span class="line"></span><br><span class="line">exit <span class="number">0</span> <span class="comment"># 进程皆有退出码</span></span><br><span class="line"></span><br><span class="line">fork &#123; sleep <span class="number">3</span> &#125; <span class="comment"># 进程皆可衍生 -&gt; 孤儿进程，友好的进程</span></span><br><span class="line"></span><br><span class="line">Process.wait <span class="comment"># 进程可待 -&gt; 看顾进程, 僵尸进程</span></span><br><span class="line"></span><br><span class="line">trap(<span class="symbol">:INT</span>, <span class="string">"IGNORE"</span>) <span class="comment"># 进程皆可获得信号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程皆可互通</span></span><br><span class="line">reader, writer = IO.pipe  </span><br><span class="line">child_socket, parent_socket = Socket.pair(<span class="symbol">:UNIX</span>, <span class="symbol">:DGRAM</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">Process.daemon <span class="comment"># 守护进程</span></span><br><span class="line"></span><br><span class="line">IO.popen(<span class="string">'less'</span>, <span class="string">'w'</span>) &#123; <span class="params">|stream|</span> stream.puts <span class="string">'some data'</span> &#125; <span class="comment"># 生成终端进程</span></span><br></pre></td></tr></table></figure><p>关注 Ruby 进程生成、互通、信号等几个方面。</p><h2 id="Ruby-线程"><a href="#Ruby-线程" class="headerlink" title="Ruby 线程"></a>Ruby 线程</h2><p>由于 Ruby 的 GIL，Ruby 线程可以并发，但不能并行。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.main == Thread.current <span class="comment"># =&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="Ruby-网络编程"><a href="#Ruby-网络编程" class="headerlink" title="Ruby 网络编程"></a>Ruby 网络编程</h2><p>Ruby 网络编程，即 Socket 编程，重点在于理解 IO 模型。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'socket'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Client</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">socket = Socket.new(<span class="symbol">:INET</span>, <span class="symbol">:STREAM</span>)</span><br><span class="line"><span class="comment"># 绑定</span></span><br><span class="line"><span class="comment"># 连接</span></span><br><span class="line">remote_addr = Socket.pack_sockaddr_in(<span class="number">8888</span>, <span class="string">'0.0.0.0'</span>)</span><br><span class="line">socket.connect(remote_addr)</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">socket.close</span><br><span class="line"></span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">socket = Socket.new(<span class="symbol">:INET</span>, <span class="symbol">:STREAM</span>)</span><br><span class="line"><span class="comment"># 绑定</span></span><br><span class="line">addr = Socket.pack_sockaddr_in(<span class="number">8888</span>, <span class="string">'0.0.0.0'</span>)</span><br><span class="line">socket.bind(addr)</span><br><span class="line"><span class="comment"># 侦听</span></span><br><span class="line">socket.listen(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 接受</span></span><br><span class="line">connection, <span class="number">_</span> = socket.accept <span class="comment"># echo hi | nc localhost 8888</span></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">connection.close</span><br></pre></td></tr></table></figure><h2 id="Ruby-分布式编程"><a href="#Ruby-分布式编程" class="headerlink" title="Ruby 分布式编程"></a>Ruby 分布式编程</h2><h2 id="Ruby-应用"><a href="#Ruby-应用" class="headerlink" title="Ruby 应用"></a>Ruby 应用</h2><p>一图胜千言。</p><p><img src="https://github.com/zhenyuanlau/cdn/blob/master/images/ruby-web-app.jpg?raw=true" alt="Ruby Rack App"></p><h3 id="Rack"><a href="#Rack" class="headerlink" title="Rack"></a>Rack</h3><p><a href="https://www.rubydoc.info/github/rack/rack/master/file/SPEC" target="_blank" rel="noopener">Rack 接口规范</a></p><p>使用 Rack，需要提供一个可调用对象，取一个环境变量，返回一个包含 HTTP 响应状态码/响应头/响应体 的数组。<br>当 Ruby 应用服务器接受一个请求，将请求信息封装到一个环境变量中，调用应用对象，经过应用中间件处理，将返回的数组作为请求的响应信息。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.ru</span></span><br><span class="line">run Proc.new &#123; <span class="params">|env|</span> [<span class="string">'200'</span>, &#123;<span class="string">'Content-Type'</span> =&gt; <span class="string">'text/html'</span>&#125;, [<span class="string">'get rack\'d'</span>]] &#125;</span><br></pre></td></tr></table></figure><p>Rack 工作原理：执行 rackup 后，读取 config.ru 文件，获取 app 对象，当没有配置时，取默认应用服务器，取默认配置，取默认中间件对 app 对象封装成包含中间件的 app 对象，启动应用服务器。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ Rack::Server.start</span><br><span class="line"><span class="comment"># =&gt; server.run wrapped_app, options, &amp;blk</span></span><br><span class="line"></span><br><span class="line">$ Rack::Server<span class="comment">#server</span></span><br><span class="line"><span class="comment"># -&gt; Rack::Handler.default</span></span><br><span class="line"><span class="comment"># =&gt; Rack::Handler::Puma</span></span><br><span class="line"></span><br><span class="line">$ Rack::Server<span class="comment">#default_options</span></span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  :environment =&gt; 'development',</span></span><br><span class="line"><span class="comment">  :pid         =&gt; nil,</span></span><br><span class="line"><span class="comment">  :Port        =&gt; 9292,</span></span><br><span class="line"><span class="comment">  :Host        =&gt; 'localhost',</span></span><br><span class="line"><span class="comment">  :AccessLog   =&gt; [],</span></span><br><span class="line"><span class="comment">  :config      =&gt; "config.ru"</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">=end</span></span><br><span class="line"></span><br><span class="line">$ Rack::Server<span class="comment">#wrapped_app</span></span><br><span class="line"><span class="comment"># -&gt; Rack::Server#build_app</span></span><br><span class="line"><span class="comment"># -&gt; Rack::Server#app</span></span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line">cfgfile = <span class="symbol">:</span><span class="symbol">:File</span>.read(config)</span><br><span class="line">cfgfile.sub!(<span class="regexp">/^__END__\n.*\Z/m</span>, <span class="string">''</span>)</span><br><span class="line">app = Rack::Builder.new &#123;</span><br><span class="line">  run Proc.new &#123; <span class="params">|env|</span> [<span class="string">'200'</span>, &#123;<span class="string">'Content-Type'</span> =&gt; <span class="string">'text/html'</span>&#125;, [<span class="string">'get rack\'d'</span>]] &#125;</span><br><span class="line">&#125;.to_app</span><br><span class="line"></span><br><span class="line">$ Rack::Server<span class="comment">#build_app</span></span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">  def build_app(app)</span></span><br><span class="line"><span class="comment">    middleware[options[:environment]].reverse_each do |middleware|</span></span><br><span class="line"><span class="comment">      middleware = middleware.call(self) if middleware.respond_to?(:call)</span></span><br><span class="line"><span class="comment">      next unless middleware</span></span><br><span class="line"><span class="comment">      klass, *args = middleware</span></span><br><span class="line"><span class="comment">      app = klass.new(app, *args)</span></span><br><span class="line"><span class="comment">    end</span></span><br><span class="line"><span class="comment">    app</span></span><br><span class="line"><span class="comment">  end</span></span><br><span class="line"><span class="comment">=end</span></span><br><span class="line"></span><br><span class="line">$ Rack::Server.default_middleware_by_environment</span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  "deployment"=&gt;</span></span><br><span class="line"><span class="comment">  [[Rack::ContentLength],</span></span><br><span class="line"><span class="comment">    [Rack::Chunked],</span></span><br><span class="line"><span class="comment">    #&lt;Proc:0x00007fedad041738@/rack/server.rb:224 (lambda)&gt;,</span></span><br><span class="line"><span class="comment">    [Rack::TempfileReaper]</span></span><br><span class="line"><span class="comment">  ],</span></span><br><span class="line"><span class="comment"> "development"=&gt;</span></span><br><span class="line"><span class="comment">  [[Rack::ContentLength],</span></span><br><span class="line"><span class="comment">   [Rack::Chunked],</span></span><br><span class="line"><span class="comment">   #&lt;Proc:0x00007fedad040540@/rack/server.rb:224 (lambda)&gt;,</span></span><br><span class="line"><span class="comment">   [Rack::ShowExceptions],</span></span><br><span class="line"><span class="comment">   [Rack::Lint],</span></span><br><span class="line"><span class="comment">   [Rack::TempfileReaper]]</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">=end</span></span><br></pre></td></tr></table></figure><p>可执行代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'rack'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> &lt;&lt; self</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">options</span></span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="symbol">:environment</span> =&gt; <span class="string">'development'</span>,</span><br><span class="line">      <span class="symbol">:pid</span>         =&gt; <span class="literal">nil</span>,</span><br><span class="line">      <span class="symbol">:Port</span>        =&gt; <span class="number">9292</span>,</span><br><span class="line">      <span class="symbol">:Host</span>        =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">      <span class="symbol">:AccessLog</span>   =&gt; [],</span><br><span class="line">      <span class="symbol">:config</span>      =&gt; <span class="string">"config.ru"</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">blk</span></span></span><br><span class="line">    <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">server</span></span></span><br><span class="line">    Rack::Handler::Thin</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">app</span></span></span><br><span class="line">    Rack::Builder.new &#123;</span><br><span class="line">      run Proc.new &#123; <span class="params">|env|</span> [<span class="string">'200'</span>, &#123;<span class="string">'Content-Type'</span> =&gt; <span class="string">'text/html'</span>&#125;, [<span class="string">'get rack\'d'</span>]] &#125;</span><br><span class="line">    &#125;.to_app</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Rack::Server.default_middleware_by_environment[<span class="string">'development'</span>].reverse_each <span class="keyword">do</span> <span class="params">|middleware|</span></span><br><span class="line">  middleware = middleware.call(<span class="keyword">self</span>) <span class="keyword">if</span> middleware.respond_to?(<span class="symbol">:call</span>)</span><br><span class="line">  <span class="keyword">next</span> <span class="keyword">unless</span> middleware</span><br><span class="line">  klass, *args = middleware</span><br><span class="line">  app = klass.new(app, *args)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">wrapped_app = app</span><br><span class="line"></span><br><span class="line">server.run wrapped_app, options, &amp;blk</span><br></pre></td></tr></table></figure><p>后面涉及两部分内容，一是 Ruby 应用服务器处理请求和响应请求，二是 Ruby 应用框架及 Ruby 应用的设计与实现。</p><h3 id="Sinatra"><a href="#Sinatra" class="headerlink" title="Sinatra"></a>Sinatra</h3><h4 id="Sinatra-应用"><a href="#Sinatra-应用" class="headerlink" title="Sinatra 应用"></a>Sinatra 应用</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></span><br><span class="line"></span><br><span class="line">get <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="string">'Hello world!'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $ ruby app.rb =&gt; http://localhost:4567</span></span><br></pre></td></tr></table></figure><p>入口在哪里？服务是怎么启动的？跟踪一下！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></span><br><span class="line"></span><br><span class="line">$ get</span><br><span class="line"><span class="comment"># =&gt;</span></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">  define_method(method_name) do |*args, &amp;block|</span></span><br><span class="line"><span class="comment">    return super(*args, &amp;block) if respond_to? method_name</span></span><br><span class="line"><span class="comment">    Delegator.target.send(method_name, *args, &amp;block)</span></span><br><span class="line"><span class="comment">  end</span></span><br><span class="line"><span class="comment">=end</span></span><br><span class="line"></span><br><span class="line">$ Sinatra::Delegator.target</span><br><span class="line"><span class="comment"># =&gt; attr_accessor :target</span></span><br><span class="line"><span class="comment"># =&gt; Application</span></span><br><span class="line"></span><br><span class="line">get <span class="string">'/'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="string">'Hello world!'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; [#&lt;Mustermann::Sinatra:"/"&gt;, [], #&lt;Proc:0x00007f9cba0c8f88@/sinatra/base.rb:1635&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 惊喜！获得一个可调用对象！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 入口!</span></span><br><span class="line"></span><br><span class="line">at_exit &#123; Application.run! <span class="keyword">if</span> $!.<span class="literal">nil</span>? &amp;&amp; Application.run? &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 app.rb 运行结束后执行</span></span><br><span class="line"></span><br><span class="line">handler = Sinatra::Application.send(<span class="symbol">:detect_rack_handler</span>)</span><br><span class="line"></span><br><span class="line">$ Sinatra::Application.run!</span><br><span class="line"><span class="comment"># -&gt; Sinatra::Application.start_server</span></span><br><span class="line"><span class="comment"># -&gt; handler.run</span></span><br></pre></td></tr></table></figure><p>看一下 at_exit：</p><blockquote><p>Converts block to a Proc object (and therefore binds it at the point of call) and registers it for execution when the program exits.<br>If multiple handlers are registered, they are executed in reverse order of registration.</p></blockquote><p>Sinatra 启动服务器的方式还是值得学习的！</p><h4 id="Sinatra-剖析"><a href="#Sinatra-剖析" class="headerlink" title="Sinatra 剖析"></a>Sinatra 剖析</h4><p>见 <a href="https://zhenyuanlau.github.io/2019/07/13/sinatra-under-a-microscope/">Sinatra 原理剖析</a></p><h3 id="Thin"><a href="#Thin" class="headerlink" title="Thin"></a>Thin</h3><h3 id="Rails"><a href="#Rails" class="headerlink" title="Rails"></a>Rails</h3><h3 id="Puma"><a href="#Puma" class="headerlink" title="Puma"></a>Puma</h3>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常处理的设计与重构</title>
      <link href="/posts/ccc3.html"/>
      <url>/posts/ccc3.html</url>
      
        <content type="html"><![CDATA[<p>《异常处理的设计与重构》较为系统地讲述了异常处理，但是叙述多为繁冗，在此提取实用的内容，摘录并整理如下（该书未涉及函数式异常处理）。</p><a id="more"></a><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常处理很重要，影响软件的健壮性，影响用户体验，继而影响公司的盈利。</p><p>关于异常处理，我们要了解以下定义：</p><ul><li>缺陷（fault）：瞬时缺陷/间歇缺陷/永久缺陷 | 设计缺陷/组件缺陷 | 开发缺陷/物理缺陷/交互缺陷</li><li>错误（error）</li><li>失败/失效（failure）</li><li>异常/例外（exception）：在程序设计语言中错误与失败的统称</li></ul><p>缺陷是错误的起因，可能会导致失败。</p><h2 id="异常上下文"><a href="#异常上下文" class="headerlink" title="异常上下文"></a>异常上下文</h2><p>异常上下文是当异常发生的时候，异常处理程序可以从异常对象所获得的相关信息。</p><p>设计语义清楚、层级分明的异常类。</p><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><ol><li>表达：如何表达异常？符号/异常实例/其他对象</li><li>声明：往外传递的异常是否需要声明？预期异常/非预期异常</li><li>通知：如何产生一个异常的实例？同步异常/异步异常|内部异常/外部异常</li><li>传递：如何传递异常？显式/隐式</li><li>附加：异常处理程序可绑定到何种程序区块？代码块/函数/对象/类</li><li>处理：针对异常，如何找到可以处理它的异常处理程序？静态范围/动态范围</li><li>继续：异常发生之后，程序的控制流程该如何进行？终止/恢复/重试</li><li>清理：无论是否发生异常，如何让程序清理资源以保持在正确的状态？</li><li>可靠性检查：因为异常处理机制所造成的问题，程序语言提供何种检查？静态检查/动态检查</li><li>并发性：程序语言对于并行处理程序，提供多少异常处理的支持？支持/不支持</li></ol><h2 id="异常安全性"><a href="#异常安全性" class="headerlink" title="异常安全性"></a>异常安全性</h2><ol><li>不保证（可能正确，也可能错误）</li><li>基本保证（无泄漏保证）</li><li>强烈保证（具备认可或复原/全部或没有的语义，要么成功，要么失败）</li><li>不抛保证（失效透明）</li></ol><h2 id="异常处理策略"><a href="#异常处理策略" class="headerlink" title="异常处理策略"></a>异常处理策略</h2><p>当程序执行时发生异常，首要任务就是要找到异常发生的根本原因，其次就是要厘清“谁该负责”处理这个异常。</p><p>确定服务的生产者和消费者，确定服务调用的前置条件和后置条件，确定异常处理责任。</p><p>所有的异常状况都有相应的报告。</p><p>报告语义清楚的异常，以便协助开发团队缩短事后除错时间。</p><p>针对不同的健壮性等级做不同的异常设计：错误报告 -&gt; 状态恢复 -&gt; 行为恢复。</p><p>考虑容错设计。</p><h2 id="缺陷处理方法"><a href="#缺陷处理方法" class="headerlink" title="缺陷处理方法"></a>缺陷处理方法</h2><ol><li>缺陷避免</li><li>缺陷容忍（通过错误检测与系统恢复手段，避免服务失效）</li><li>缺陷移除</li><li>缺陷预测</li></ol><h2 id="命令式异常处理"><a href="#命令式异常处理" class="headerlink" title="命令式异常处理"></a>命令式异常处理</h2><h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><ol><li>实现需求</li><li>为状态恢复做准备或制作检查点</li></ol><h3 id="Catch"><a href="#Catch" class="headerlink" title="Catch"></a>Catch</h3><ol><li>进行错误处理与缺陷处理</li><li>报告错误状况</li><li>控制重试流程</li></ol><h3 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h3><ol><li>释放资源</li><li>清除检查点</li></ol><h2 id="异常处理设计"><a href="#异常处理设计" class="headerlink" title="异常处理设计"></a>异常处理设计</h2><ol><li>用途观点（失败/通知）</li><li>设计观点（声明/未声明|预期异常/非预期异常）</li><li>处理观点（可恢复/不可恢复）</li><li>工具支持观点（提示/无提示）</li><li>流程观点</li></ol><p>要借助异常的上下文来确定异常的用途。</p><h2 id="异常处理坏味道"><a href="#异常处理坏味道" class="headerlink" title="异常处理坏味道"></a>异常处理坏味道</h2><ul><li>返回码</li><li>忽略已查异常</li><li>忽略异常</li><li>未保护主程序</li><li>空的异常处理程序</li><li>嵌套 Try 语句</li><li>粗心的资源清理</li></ul><h2 id="异常处理重构"><a href="#异常处理重构" class="headerlink" title="异常处理重构"></a>异常处理重构</h2><p>清除异常处理的坏味道（略)</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
